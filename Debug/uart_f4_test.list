
uart_f4_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005410  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08005598  08005598  00015598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057d8  080057d8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  080057d8  080057d8  000157d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057e0  080057e0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080057e0  080057e0  000157e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057e8  080057e8  000157e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080057ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00000a94  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b20  20000b20  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff61  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000236b  00000000  00000000  0003001d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c0  00000000  00000000  00032388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000920  00000000  00000000  00032d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f93  00000000  00000000  00033668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ce5a  00000000  00000000  000555fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c97ae  00000000  00000000  00062455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012bc03  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bf0  00000000  00000000  0012bc54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005580 	.word	0x08005580

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	08005580 	.word	0x08005580

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	0a5a      	lsrs	r2, r3, #9
 80004ec:	490f      	ldr	r1, [pc, #60]	; (800052c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80004ee:	fba1 1202 	umull	r1, r2, r1, r2
 80004f2:	09d2      	lsrs	r2, r2, #7
 80004f4:	490e      	ldr	r1, [pc, #56]	; (8000530 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80004f6:	fb01 f202 	mul.w	r2, r1, r2
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	0a5b      	lsrs	r3, r3, #9
 8000504:	4a09      	ldr	r2, [pc, #36]	; (800052c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000506:	fba2 2303 	umull	r2, r3, r2, r3
 800050a:	09db      	lsrs	r3, r3, #7
 800050c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	441a      	add	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	68fa      	ldr	r2, [r7, #12]
 800051e:	601a      	str	r2, [r3, #0]
}
 8000520:	bf00      	nop
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	00044b83 	.word	0x00044b83
 8000530:	3b9aca00 	.word	0x3b9aca00

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f002 f8ca 	bl	80026d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f80c 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 f8ba 	bl	80006b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000544:	f000 f890 	bl	8000668 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000548:	f000 f864 	bl	8000614 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 800054c:	f001 f9cc 	bl	80018e8 <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  loop();
 8000550:	f001 f9da 	bl	8001908 <loop>
 8000554:	e7fc      	b.n	8000550 <main+0x1c>
	...

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f004 fe80 	bl	800526c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xb4>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <SystemClock_Config+0xb4>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SystemClock_Config+0xb4>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <SystemClock_Config+0xb8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a1b      	ldr	r2, [pc, #108]	; (8000610 <SystemClock_Config+0xb8>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <SystemClock_Config+0xb8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	2310      	movs	r3, #16
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0320 	add.w	r3, r7, #32
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 ffc7 	bl	800355c <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005d4:	f000 f88a 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fa2a 	bl	8003a4c <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005fe:	f000 f875 	bl	80006ec <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	; 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <MX_USART2_UART_Init+0x50>)
 800061c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000620:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800064c:	f003 fbde 	bl	8003e0c <HAL_UART_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000656:	f000 f849 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200000a8 	.word	0x200000a8
 8000664:	40004400 	.word	0x40004400

08000668 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_DMA_Init+0x4c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <MX_DMA_Init+0x4c>)
 8000678:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_DMA_Init+0x4c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	2010      	movs	r0, #16
 8000690:	f002 f98f 	bl	80029b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000694:	2010      	movs	r0, #16
 8000696:	f002 f9a8 	bl	80029ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2011      	movs	r0, #17
 80006a0:	f002 f987 	bl	80029b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006a4:	2011      	movs	r0, #17
 80006a6:	f002 f9a0 	bl	80029ea <HAL_NVIC_EnableIRQ>

}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_GPIO_Init+0x30>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <MX_GPIO_Init+0x30>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_GPIO_Init+0x30>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <Error_Handler+0x8>

080006f6 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2200      	movs	r2, #0
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4618      	mov	r0, r3
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	4a04      	ldr	r2, [pc, #16]	; (8000734 <_ZN3ros3MsgC1Ev+0x1c>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	080057a8 	.word	0x080057a8

08000738 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
      data()
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ffe8 	bl	8000718 <_ZN3ros3MsgC1Ev>
 8000748:	4a06      	ldr	r2, [pc, #24]	; (8000764 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3304      	adds	r3, #4
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ffcf 	bl	80006f6 <_ZN3ros4TimeC1Ev>
    {
    }
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	08005790 	.word	0x08005790

08000768 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6859      	ldr	r1, [r3, #4]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	683a      	ldr	r2, [r7, #0]
 800077e:	4413      	add	r3, r2
 8000780:	b2ca      	uxtb	r2, r1
 8000782:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	0a19      	lsrs	r1, r3, #8
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3301      	adds	r3, #1
 800078e:	683a      	ldr	r2, [r7, #0]
 8000790:	4413      	add	r3, r2
 8000792:	b2ca      	uxtb	r2, r1
 8000794:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	0c19      	lsrs	r1, r3, #16
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	3302      	adds	r3, #2
 80007a0:	683a      	ldr	r2, [r7, #0]
 80007a2:	4413      	add	r3, r2
 80007a4:	b2ca      	uxtb	r2, r1
 80007a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	0e19      	lsrs	r1, r3, #24
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3303      	adds	r3, #3
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	4413      	add	r3, r2
 80007b6:	b2ca      	uxtb	r2, r1
 80007b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	3304      	adds	r3, #4
 80007be:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6899      	ldr	r1, [r3, #8]
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	4413      	add	r3, r2
 80007ca:	b2ca      	uxtb	r2, r1
 80007cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	689b      	ldr	r3, [r3, #8]
 80007d2:	0a19      	lsrs	r1, r3, #8
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	3301      	adds	r3, #1
 80007d8:	683a      	ldr	r2, [r7, #0]
 80007da:	4413      	add	r3, r2
 80007dc:	b2ca      	uxtb	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	689b      	ldr	r3, [r3, #8]
 80007e4:	0c19      	lsrs	r1, r3, #16
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	3302      	adds	r3, #2
 80007ea:	683a      	ldr	r2, [r7, #0]
 80007ec:	4413      	add	r3, r2
 80007ee:	b2ca      	uxtb	r2, r1
 80007f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	0e19      	lsrs	r1, r3, #24
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3303      	adds	r3, #3
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	b2ca      	uxtb	r2, r1
 8000802:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	3304      	adds	r3, #4
 8000808:	60fb      	str	r3, [r7, #12]
      return offset;
 800080a:	68fb      	ldr	r3, [r7, #12]
    }
 800080c:	4618      	mov	r0, r3
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	683a      	ldr	r2, [r7, #0]
 800082a:	4413      	add	r3, r2
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	461a      	mov	r2, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	685a      	ldr	r2, [r3, #4]
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	3301      	adds	r3, #1
 800083c:	6839      	ldr	r1, [r7, #0]
 800083e:	440b      	add	r3, r1
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	021b      	lsls	r3, r3, #8
 8000844:	431a      	orrs	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	685a      	ldr	r2, [r3, #4]
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	3302      	adds	r3, #2
 8000852:	6839      	ldr	r1, [r7, #0]
 8000854:	440b      	add	r3, r1
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	041b      	lsls	r3, r3, #16
 800085a:	431a      	orrs	r2, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	3303      	adds	r3, #3
 8000868:	6839      	ldr	r1, [r7, #0]
 800086a:	440b      	add	r3, r1
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	061b      	lsls	r3, r3, #24
 8000870:	431a      	orrs	r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	3304      	adds	r3, #4
 800087a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	683a      	ldr	r2, [r7, #0]
 8000880:	4413      	add	r3, r2
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	689a      	ldr	r2, [r3, #8]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	3301      	adds	r3, #1
 8000892:	6839      	ldr	r1, [r7, #0]
 8000894:	440b      	add	r3, r1
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	021b      	lsls	r3, r3, #8
 800089a:	431a      	orrs	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	689a      	ldr	r2, [r3, #8]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	3302      	adds	r3, #2
 80008a8:	6839      	ldr	r1, [r7, #0]
 80008aa:	440b      	add	r3, r1
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	041b      	lsls	r3, r3, #16
 80008b0:	431a      	orrs	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	689a      	ldr	r2, [r3, #8]
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	3303      	adds	r3, #3
 80008be:	6839      	ldr	r1, [r7, #0]
 80008c0:	440b      	add	r3, r1
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	061b      	lsls	r3, r3, #24
 80008c6:	431a      	orrs	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3304      	adds	r3, #4
 80008d0:	60fb      	str	r3, [r7, #12]
     return offset;
 80008d2:	68fb      	ldr	r3, [r7, #12]
    }
 80008d4:	4618      	mov	r0, r3
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80008ea:	4618      	mov	r0, r3
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	08005598 	.word	0x08005598

080008fc <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000906:	4618      	mov	r0, r3
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	080055a8 	.word	0x080055a8

08000918 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fef8 	bl	8000718 <_ZN3ros3MsgC1Ev>
 8000928:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	809a      	strh	r2, [r3, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a09      	ldr	r2, [pc, #36]	; (800095c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a06      	ldr	r2, [pc, #24]	; (800095c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000944:	611a      	str	r2, [r3, #16]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
    {
    }
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	08005778 	.word	0x08005778
 800095c:	080055cc 	.word	0x080055cc

08000960 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	8899      	ldrh	r1, [r3, #4]
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	683a      	ldr	r2, [r7, #0]
 8000976:	4413      	add	r3, r2
 8000978:	b2ca      	uxtb	r2, r1
 800097a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	889b      	ldrh	r3, [r3, #4]
 8000980:	0a1b      	lsrs	r3, r3, #8
 8000982:	b299      	uxth	r1, r3
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	3301      	adds	r3, #1
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	4413      	add	r3, r2
 800098c:	b2ca      	uxtb	r2, r1
 800098e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	3302      	adds	r3, #2
 8000994:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fc14 	bl	80001c8 <strlen>
 80009a0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	683a      	ldr	r2, [r7, #0]
 80009a6:	4413      	add	r3, r2
 80009a8:	69b9      	ldr	r1, [r7, #24]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 ffc6 	bl	800193c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	3304      	adds	r3, #4
 80009b4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	18d0      	adds	r0, r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	4619      	mov	r1, r3
 80009c4:	f004 fc44 	bl	8005250 <memcpy>
      offset += length_topic_name;
 80009c8:	69fa      	ldr	r2, [r7, #28]
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	4413      	add	r3, r2
 80009ce:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fbf7 	bl	80001c8 <strlen>
 80009da:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	4413      	add	r3, r2
 80009e2:	6979      	ldr	r1, [r7, #20]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 ffa9 	bl	800193c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3304      	adds	r3, #4
 80009ee:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	683a      	ldr	r2, [r7, #0]
 80009f4:	18d0      	adds	r0, r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	697a      	ldr	r2, [r7, #20]
 80009fc:	4619      	mov	r1, r3
 80009fe:	f004 fc27 	bl	8005250 <memcpy>
      offset += length_message_type;
 8000a02:	69fa      	ldr	r2, [r7, #28]
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	4413      	add	r3, r2
 8000a08:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	691b      	ldr	r3, [r3, #16]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fbda 	bl	80001c8 <strlen>
 8000a14:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	6939      	ldr	r1, [r7, #16]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 ff8c 	bl	800193c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	3304      	adds	r3, #4
 8000a28:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	18d0      	adds	r0, r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	691b      	ldr	r3, [r3, #16]
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	4619      	mov	r1, r3
 8000a38:	f004 fc0a 	bl	8005250 <memcpy>
      offset += length_md5sum;
 8000a3c:	69fa      	ldr	r2, [r7, #28]
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	4413      	add	r3, r2
 8000a42:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000a4a:	68f9      	ldr	r1, [r7, #12]
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	683a      	ldr	r2, [r7, #0]
 8000a50:	4413      	add	r3, r2
 8000a52:	b2ca      	uxtb	r2, r1
 8000a54:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	0a19      	lsrs	r1, r3, #8
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	683a      	ldr	r2, [r7, #0]
 8000a60:	4413      	add	r3, r2
 8000a62:	b2ca      	uxtb	r2, r1
 8000a64:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	0c19      	lsrs	r1, r3, #16
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3302      	adds	r3, #2
 8000a6e:	683a      	ldr	r2, [r7, #0]
 8000a70:	4413      	add	r3, r2
 8000a72:	b2ca      	uxtb	r2, r1
 8000a74:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	0e19      	lsrs	r1, r3, #24
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3303      	adds	r3, #3
 8000a7e:	683a      	ldr	r2, [r7, #0]
 8000a80:	4413      	add	r3, r2
 8000a82:	b2ca      	uxtb	r2, r1
 8000a84:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	61fb      	str	r3, [r7, #28]
      return offset;
 8000a8c:	69fb      	ldr	r3, [r7, #28]
    }
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3720      	adds	r7, #32
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b08a      	sub	sp, #40	; 0x28
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	683a      	ldr	r2, [r7, #0]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	889b      	ldrh	r3, [r3, #4]
 8000ab6:	b21a      	sxth	r2, r3
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	3301      	adds	r3, #1
 8000abc:	6839      	ldr	r1, [r7, #0]
 8000abe:	440b      	add	r3, r1
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	021b      	lsls	r3, r3, #8
 8000ac4:	b21b      	sxth	r3, r3
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	b21b      	sxth	r3, r3
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	3302      	adds	r3, #2
 8000ad4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	441a      	add	r2, r3
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 ff48 	bl	8001978 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	3304      	adds	r3, #4
 8000aec:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	4413      	add	r3, r2
 8000af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d20c      	bcs.n	8000b18 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000afe:	683a      	ldr	r2, [r7, #0]
 8000b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b02:	441a      	add	r2, r3
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	3b01      	subs	r3, #1
 8000b08:	6839      	ldr	r1, [r7, #0]
 8000b0a:	440b      	add	r3, r1
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b12:	3301      	adds	r3, #1
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
 8000b16:	e7ec      	b.n	8000af2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	683a      	ldr	r2, [r7, #0]
 8000b2e:	441a      	add	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	4413      	add	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	441a      	add	r2, r3
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	4611      	mov	r1, r2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 ff15 	bl	8001978 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	3304      	adds	r3, #4
 8000b52:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	623b      	str	r3, [r7, #32]
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	6a3a      	ldr	r2, [r7, #32]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d20c      	bcs.n	8000b7e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	6a3b      	ldr	r3, [r7, #32]
 8000b68:	441a      	add	r2, r3
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	6839      	ldr	r1, [r7, #0]
 8000b70:	440b      	add	r3, r1
 8000b72:	7812      	ldrb	r2, [r2, #0]
 8000b74:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000b76:	6a3b      	ldr	r3, [r7, #32]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	623b      	str	r3, [r7, #32]
 8000b7c:	e7ec      	b.n	8000b58 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	4413      	add	r3, r2
 8000b84:	3b01      	subs	r3, #1
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	4413      	add	r3, r2
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	441a      	add	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	441a      	add	r2, r3
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	4611      	mov	r1, r2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fee2 	bl	8001978 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	61fb      	str	r3, [r7, #28]
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	69fa      	ldr	r2, [r7, #28]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d20c      	bcs.n	8000be4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	441a      	add	r2, r3
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	6839      	ldr	r1, [r7, #0]
 8000bd6:	440b      	add	r3, r1
 8000bd8:	7812      	ldrb	r2, [r2, #0]
 8000bda:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	3301      	adds	r3, #1
 8000be0:	61fb      	str	r3, [r7, #28]
 8000be2:	e7ec      	b.n	8000bbe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	4413      	add	r3, r2
 8000bea:	3b01      	subs	r3, #1
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	683a      	ldr	r2, [r7, #0]
 8000bfa:	441a      	add	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4413      	add	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	6839      	ldr	r1, [r7, #0]
 8000c12:	440a      	add	r2, r1
 8000c14:	7812      	ldrb	r2, [r2, #0]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	6839      	ldr	r1, [r7, #0]
 8000c22:	440b      	add	r3, r1
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000c2c:	68ba      	ldr	r2, [r7, #8]
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	3302      	adds	r3, #2
 8000c32:	6839      	ldr	r1, [r7, #0]
 8000c34:	440b      	add	r3, r1
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	041b      	lsls	r3, r3, #16
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	3303      	adds	r3, #3
 8000c44:	6839      	ldr	r1, [r7, #0]
 8000c46:	440b      	add	r3, r1
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	061b      	lsls	r3, r3, #24
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000c50:	68ba      	ldr	r2, [r7, #8]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	61bb      	str	r3, [r7, #24]
     return offset;
 8000c5c:	69bb      	ldr	r3, [r7, #24]
    }
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3728      	adds	r7, #40	; 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	080055d0 	.word	0x080055d0

08000c84 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	080055ec 	.word	0x080055ec

08000ca0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fd34 	bl	8000718 <_ZN3ros3MsgC1Ev>
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	711a      	strb	r2, [r3, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000cc0:	609a      	str	r2, [r3, #8]
    {
    }
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	08005760 	.word	0x08005760
 8000cd0:	080055cc 	.word	0x080055cc

08000cd4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	683a      	ldr	r2, [r7, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	7912      	ldrb	r2, [r2, #4]
 8000cec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fa65 	bl	80001c8 <strlen>
 8000cfe:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	4413      	add	r3, r2
 8000d06:	68b9      	ldr	r1, [r7, #8]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 fe17 	bl	800193c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	3304      	adds	r3, #4
 8000d12:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	683a      	ldr	r2, [r7, #0]
 8000d18:	18d0      	adds	r0, r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	4619      	mov	r1, r3
 8000d22:	f004 fa95 	bl	8005250 <memcpy>
      offset += length_msg;
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
      return offset;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
    }
 8000d30:	4618      	mov	r0, r3
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	683a      	ldr	r2, [r7, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	781a      	ldrb	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	3301      	adds	r3, #1
 8000d56:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	683a      	ldr	r2, [r7, #0]
 8000d5c:	441a      	add	r2, r3
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	4611      	mov	r1, r2
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 fe07 	bl	8001978 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	4413      	add	r3, r2
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d20c      	bcs.n	8000d9a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	441a      	add	r2, r3
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	6839      	ldr	r1, [r7, #0]
 8000d8c:	440b      	add	r3, r1
 8000d8e:	7812      	ldrb	r2, [r2, #0]
 8000d90:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	3301      	adds	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	e7ec      	b.n	8000d74 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	3b01      	subs	r3, #1
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	4413      	add	r3, r2
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	3b01      	subs	r3, #1
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	441a      	add	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4413      	add	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
     return offset;
 8000dbe:	693b      	ldr	r3, [r7, #16]
    }
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	08005610 	.word	0x08005610

08000de4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	08005624 	.word	0x08005624

08000e00 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fc84 	bl	8000718 <_ZN3ros3MsgC1Ev>
 8000e10:	4a11      	ldr	r2, [pc, #68]	; (8000e58 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f04f 0200 	mov.w	r2, #0
 8000e34:	615a      	str	r2, [r3, #20]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	61da      	str	r2, [r3, #28]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	621a      	str	r2, [r3, #32]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	08005748 	.word	0x08005748

08000e5c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6859      	ldr	r1, [r3, #4]
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e70:	683a      	ldr	r2, [r7, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	b2ca      	uxtb	r2, r1
 8000e76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	0a19      	lsrs	r1, r3, #8
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	3301      	adds	r3, #1
 8000e82:	683a      	ldr	r2, [r7, #0]
 8000e84:	4413      	add	r3, r2
 8000e86:	b2ca      	uxtb	r2, r1
 8000e88:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	0c19      	lsrs	r1, r3, #16
 8000e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e92:	3302      	adds	r3, #2
 8000e94:	683a      	ldr	r2, [r7, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	b2ca      	uxtb	r2, r1
 8000e9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	0e19      	lsrs	r1, r3, #24
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	3303      	adds	r3, #3
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	b2ca      	uxtb	r2, r1
 8000eac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	6a3a      	ldr	r2, [r7, #32]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d22b      	bcs.n	8000f1a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68da      	ldr	r2, [r3, #12]
 8000ec6:	6a3b      	ldr	r3, [r7, #32]
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000ed0:	6939      	ldr	r1, [r7, #16]
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	b2ca      	uxtb	r2, r1
 8000eda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	0a19      	lsrs	r1, r3, #8
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	b2ca      	uxtb	r2, r1
 8000eea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	0c19      	lsrs	r1, r3, #16
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	b2ca      	uxtb	r2, r1
 8000efa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	0e19      	lsrs	r1, r3, #24
 8000f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f02:	3303      	adds	r3, #3
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	b2ca      	uxtb	r2, r1
 8000f0a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0e:	3304      	adds	r3, #4
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000f12:	6a3b      	ldr	r3, [r7, #32]
 8000f14:	3301      	adds	r3, #1
 8000f16:	623b      	str	r3, [r7, #32]
 8000f18:	e7ce      	b.n	8000eb8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6919      	ldr	r1, [r3, #16]
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	b2ca      	uxtb	r2, r1
 8000f26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	691b      	ldr	r3, [r3, #16]
 8000f2c:	0a19      	lsrs	r1, r3, #8
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	3301      	adds	r3, #1
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	4413      	add	r3, r2
 8000f36:	b2ca      	uxtb	r2, r1
 8000f38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	0c19      	lsrs	r1, r3, #16
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	3302      	adds	r3, #2
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	b2ca      	uxtb	r2, r1
 8000f4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	0e19      	lsrs	r1, r3, #24
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	3303      	adds	r3, #3
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	4413      	add	r3, r2
 8000f5a:	b2ca      	uxtb	r2, r1
 8000f5c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	3304      	adds	r3, #4
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d22b      	bcs.n	8000fca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	699a      	ldr	r2, [r3, #24]
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000f80:	68f9      	ldr	r1, [r7, #12]
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	b2ca      	uxtb	r2, r1
 8000f8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	0a19      	lsrs	r1, r3, #8
 8000f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f92:	3301      	adds	r3, #1
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	b2ca      	uxtb	r2, r1
 8000f9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	0c19      	lsrs	r1, r3, #16
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b2ca      	uxtb	r2, r1
 8000faa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	0e19      	lsrs	r1, r3, #24
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb2:	3303      	adds	r3, #3
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b2ca      	uxtb	r2, r1
 8000fba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	3304      	adds	r3, #4
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	61fb      	str	r3, [r7, #28]
 8000fc8:	e7ce      	b.n	8000f68 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69d9      	ldr	r1, [r3, #28]
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	b2ca      	uxtb	r2, r1
 8000fd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	69db      	ldr	r3, [r3, #28]
 8000fdc:	0a19      	lsrs	r1, r3, #8
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b2ca      	uxtb	r2, r1
 8000fe8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	0c19      	lsrs	r1, r3, #16
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	b2ca      	uxtb	r2, r1
 8000ffa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	0e19      	lsrs	r1, r3, #24
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	3303      	adds	r3, #3
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	4413      	add	r3, r2
 800100a:	b2ca      	uxtb	r2, r1
 800100c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	3304      	adds	r3, #4
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001014:	2300      	movs	r3, #0
 8001016:	61bb      	str	r3, [r7, #24]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69db      	ldr	r3, [r3, #28]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	429a      	cmp	r2, r3
 8001020:	d228      	bcs.n	8001074 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff f8ca 	bl	80001c8 <strlen>
 8001034:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	4413      	add	r3, r2
 800103c:	6979      	ldr	r1, [r7, #20]
 800103e:	4618      	mov	r0, r3
 8001040:	f000 fc7c 	bl	800193c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001046:	3304      	adds	r3, #4
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	18d0      	adds	r0, r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	4619      	mov	r1, r3
 8001060:	f004 f8f6 	bl	8005250 <memcpy>
      offset += length_stringsi;
 8001064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	4413      	add	r3, r2
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	3301      	adds	r3, #1
 8001070:	61bb      	str	r3, [r7, #24]
 8001072:	e7d1      	b.n	8001018 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001076:	4618      	mov	r0, r3
 8001078:	3728      	adds	r7, #40	; 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800107e:	b580      	push	{r7, lr}
 8001080:	b08e      	sub	sp, #56	; 0x38
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800108c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	4413      	add	r3, r2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001098:	3301      	adds	r3, #1
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	4413      	add	r3, r2
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	6a3a      	ldr	r2, [r7, #32]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80010a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010aa:	3302      	adds	r3, #2
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	041b      	lsls	r3, r3, #16
 80010b4:	6a3a      	ldr	r2, [r7, #32]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80010ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010bc:	3303      	adds	r3, #3
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	4413      	add	r3, r2
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	061b      	lsls	r3, r3, #24
 80010c6:	6a3a      	ldr	r2, [r7, #32]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80010cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ce:	3304      	adds	r3, #4
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	6a3a      	ldr	r2, [r7, #32]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d90a      	bls.n	80010f2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	6a3b      	ldr	r3, [r7, #32]
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4619      	mov	r1, r3
 80010e6:	4610      	mov	r0, r2
 80010e8:	f004 f8c8 	bl	800527c <realloc>
 80010ec:	4602      	mov	r2, r0
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a3a      	ldr	r2, [r7, #32]
 80010f6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80010f8:	2300      	movs	r3, #0
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001102:	429a      	cmp	r2, r3
 8001104:	d236      	bcs.n	8001174 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800110e:	6839      	ldr	r1, [r7, #0]
 8001110:	440a      	add	r2, r1
 8001112:	7812      	ldrb	r2, [r2, #0]
 8001114:	4313      	orrs	r3, r2
 8001116:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800111c:	3301      	adds	r3, #1
 800111e:	6839      	ldr	r1, [r7, #0]
 8001120:	440b      	add	r3, r1
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	4313      	orrs	r3, r2
 8001128:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112e:	3302      	adds	r3, #2
 8001130:	6839      	ldr	r1, [r7, #0]
 8001132:	440b      	add	r3, r1
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	041b      	lsls	r3, r3, #16
 8001138:	4313      	orrs	r3, r2
 800113a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001140:	3303      	adds	r3, #3
 8001142:	6839      	ldr	r1, [r7, #0]
 8001144:	440b      	add	r3, r1
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	061b      	lsls	r3, r3, #24
 800114a:	4313      	orrs	r3, r2
 800114c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001156:	3304      	adds	r3, #4
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68da      	ldr	r2, [r3, #12]
 800115e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	6812      	ldr	r2, [r2, #0]
 800116a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800116c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800116e:	3301      	adds	r3, #1
 8001170:	633b      	str	r3, [r7, #48]	; 0x30
 8001172:	e7c3      	b.n	80010fc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	4413      	add	r3, r2
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800117e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001180:	3301      	adds	r3, #1
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	4413      	add	r3, r2
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	69fa      	ldr	r2, [r7, #28]
 800118c:	4313      	orrs	r3, r2
 800118e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001192:	3302      	adds	r3, #2
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	4413      	add	r3, r2
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	041b      	lsls	r3, r3, #16
 800119c:	69fa      	ldr	r2, [r7, #28]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80011a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a4:	3303      	adds	r3, #3
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	4413      	add	r3, r2
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	061b      	lsls	r3, r3, #24
 80011ae:	69fa      	ldr	r2, [r7, #28]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80011b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011b6:	3304      	adds	r3, #4
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	69fa      	ldr	r2, [r7, #28]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d90a      	bls.n	80011da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	699a      	ldr	r2, [r3, #24]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4619      	mov	r1, r3
 80011ce:	4610      	mov	r0, r2
 80011d0:	f004 f854 	bl	800527c <realloc>
 80011d4:	4602      	mov	r2, r0
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80011e0:	2300      	movs	r3, #0
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d236      	bcs.n	800125c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011f6:	6839      	ldr	r1, [r7, #0]
 80011f8:	440a      	add	r2, r1
 80011fa:	7812      	ldrb	r2, [r2, #0]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001204:	3301      	adds	r3, #1
 8001206:	6839      	ldr	r1, [r7, #0]
 8001208:	440b      	add	r3, r1
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	4313      	orrs	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001216:	3302      	adds	r3, #2
 8001218:	6839      	ldr	r1, [r7, #0]
 800121a:	440b      	add	r3, r1
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	041b      	lsls	r3, r3, #16
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001228:	3303      	adds	r3, #3
 800122a:	6839      	ldr	r1, [r7, #0]
 800122c:	440b      	add	r3, r1
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	061b      	lsls	r3, r3, #24
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800123c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123e:	3304      	adds	r3, #4
 8001240:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	699a      	ldr	r2, [r3, #24]
 8001246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	3214      	adds	r2, #20
 8001250:	6812      	ldr	r2, [r2, #0]
 8001252:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	3301      	adds	r3, #1
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800125a:	e7c3      	b.n	80011e4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800125c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	4413      	add	r3, r2
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001268:	3301      	adds	r3, #1
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800127a:	3302      	adds	r3, #2
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	4413      	add	r3, r2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	041b      	lsls	r3, r3, #16
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800128a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800128c:	3303      	adds	r3, #3
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	4413      	add	r3, r2
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	061b      	lsls	r3, r3, #24
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800129c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129e:	3304      	adds	r3, #4
 80012a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d90a      	bls.n	80012c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4619      	mov	r1, r3
 80012b6:	4610      	mov	r0, r2
 80012b8:	f003 ffe0 	bl	800527c <realloc>
 80012bc:	4602      	mov	r2, r0
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80012c8:	2300      	movs	r3, #0
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d23f      	bcs.n	8001356 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80012d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	441a      	add	r2, r3
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 fb48 	bl	8001978 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80012e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ea:	3304      	adds	r3, #4
 80012ec:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80012ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
 80012f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d20c      	bcs.n	8001318 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	441a      	add	r2, r3
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	3b01      	subs	r3, #1
 8001308:	6839      	ldr	r1, [r7, #0]
 800130a:	440b      	add	r3, r1
 800130c:	7812      	ldrb	r2, [r2, #0]
 800130e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	3301      	adds	r3, #1
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
 8001316:	e7ec      	b.n	80012f2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	3b01      	subs	r3, #1
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	4413      	add	r3, r2
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800132a:	3b01      	subs	r3, #1
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	441a      	add	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4413      	add	r3, r2
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	3220      	adds	r2, #32
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800134e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001350:	3301      	adds	r3, #1
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
 8001354:	e7ba      	b.n	80012cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001358:	4618      	mov	r0, r3
 800135a:	3738      	adds	r7, #56	; 0x38
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	080056e4 	.word	0x080056e4

0800137c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	08005648 	.word	0x08005648

08001398 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
 80013a4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	611a      	str	r2, [r3, #16]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4618      	mov	r0, r3
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68d8      	ldr	r0, [r3, #12]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6891      	ldr	r1, [r2, #8]
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	4798      	blx	r3
 80013e4:	4603      	mov	r3, r0
  };
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691b      	ldr	r3, [r3, #16]
  }
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800141c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <_ZN13STM32HardwareC1Ev+0x34>)
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	200000a8 	.word	0x200000a8

08001464 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 f804 	bl	800147a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6818      	ldr	r0, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3304      	adds	r3, #4
 800148a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800148e:	4619      	mov	r1, r3
 8001490:	f002 fd88 	bl	8003fa4 <HAL_UART_Receive_DMA>
    }
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <_ZN13STM32Hardware4readEv>:

    int read(){
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
      int c = -1;
 80014a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014a8:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ffa8 	bl	8001406 <_ZN13STM32Hardware10getRdmaIndEv>
 80014b6:	4603      	mov	r3, r0
 80014b8:	429c      	cmp	r4, r3
 80014ba:	bf14      	ite	ne
 80014bc:	2301      	movne	r3, #1
 80014be:	2300      	moveq	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d012      	beq.n	80014ec <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80014cc:	1c59      	adds	r1, r3, #1
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	4413      	add	r3, r2
 80014d8:	791b      	ldrb	r3, [r3, #4]
 80014da:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80014e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80014ec:	68fb      	ldr	r3, [r7, #12]
    }
 80014ee:	4618      	mov	r0, r3
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd90      	pop	{r4, r7, pc}
	...

080014f8 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b20      	cmp	r3, #32
 800150c:	d108      	bne.n	8001520 <_ZN13STM32Hardware5flushEv+0x28>
 800150e:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	f083 0301 	eor.w	r3, r3, #1
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <_ZN13STM32Hardware5flushEv+0x28>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <_ZN13STM32Hardware5flushEv+0x2a>
 8001520:	2300      	movs	r3, #0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d03f      	beq.n	80015a6 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8001526:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001528:	2201      	movs	r2, #1
 800152a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001538:	429a      	cmp	r2, r3
 800153a:	d031      	beq.n	80015a0 <_ZN13STM32Hardware5flushEv+0xa8>
        	uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001548:	429a      	cmp	r2, r3
 800154a:	d20a      	bcs.n	8001562 <_ZN13STM32Hardware5flushEv+0x6a>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001552:	b29a      	uxth	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800155a:	b29b      	uxth	r3, r3
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	b29b      	uxth	r3, r3
 8001560:	e006      	b.n	8001570 <_ZN13STM32Hardware5flushEv+0x78>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001568:	b29b      	uxth	r3, r3
 800156a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800156e:	b29b      	uxth	r3, r3
 8001570:	81fb      	strh	r3, [r7, #14]
        	HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800157c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	4413      	add	r3, r2
 8001584:	89fa      	ldrh	r2, [r7, #14]
 8001586:	4619      	mov	r1, r3
 8001588:	f002 fc8e 	bl	8003ea8 <HAL_UART_Transmit_DMA>
        	tfind = (tfind + len) & (tbuflen - 1);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001592:	89fb      	ldrh	r3, [r7, #14]
 8001594:	4413      	add	r3, r2
 8001596:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <_ZN13STM32Hardware5flushEv+0xb8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
      }
    }
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200001ac 	.word	0x200001ac

080015b4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
      int n = length;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ca:	bfa8      	it	ge
 80015cc:	f44f 7300 	movge.w	r3, #512	; 0x200
 80015d0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80015d8:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	4293      	cmp	r3, r2
 80015e0:	bf28      	it	cs
 80015e2:	4613      	movcs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80015ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	4413      	add	r3, r2
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	68b9      	ldr	r1, [r7, #8]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f003 fe29 	bl	8005250 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	4413      	add	r3, r2
 8001608:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	429a      	cmp	r2, r3
 8001618:	d00b      	beq.n	8001632 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	18d1      	adds	r1, r2, r3
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	461a      	mov	r2, r3
 800162e:	f003 fe0f 	bl	8005250 <memcpy>
      }

      flush();
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f7ff ff60 	bl	80014f8 <_ZN13STM32Hardware5flushEv>
    }
 8001638:	bf00      	nop
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	f001 f8a8 	bl	800279c <HAL_GetTick>
 800164c:	4603      	mov	r3, r0
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
      data("")
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff f858 	bl	8000718 <_ZN3ros3MsgC1Ev>
 8001668:	4a05      	ldr	r2, [pc, #20]	; (8001680 <_ZN8std_msgs6StringC1Ev+0x28>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a04      	ldr	r2, [pc, #16]	; (8001684 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001672:	605a      	str	r2, [r3, #4]
    {
    }
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	0800571c 	.word	0x0800571c
 8001684:	080055cc 	.word	0x080055cc

08001688 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fd94 	bl	80001c8 <strlen>
 80016a0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	4413      	add	r3, r2
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f946 	bl	800193c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	3304      	adds	r3, #4
 80016b4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	18d0      	adds	r0, r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	4619      	mov	r1, r3
 80016c4:	f003 fdc4 	bl	8005250 <memcpy>
      offset += length_data;
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	4413      	add	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
      return offset;
 80016d0:	68fb      	ldr	r3, [r7, #12]
    }
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	441a      	add	r2, r3
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 f93f 	bl	8001978 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	3304      	adds	r3, #4
 80016fe:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4413      	add	r3, r2
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	429a      	cmp	r2, r3
 800170e:	d20c      	bcs.n	800172a <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	441a      	add	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3b01      	subs	r3, #1
 800171a:	6839      	ldr	r1, [r7, #0]
 800171c:	440b      	add	r3, r1
 800171e:	7812      	ldrb	r2, [r2, #0]
 8001720:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e7ec      	b.n	8001704 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	3b01      	subs	r3, #1
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	4413      	add	r3, r2
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	3b01      	subs	r3, #1
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	441a      	add	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
     return offset;
 800174e:	693b      	ldr	r3, [r7, #16]
    }
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	0800566c 	.word	0x0800566c

08001774 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <_ZN8std_msgs6String6getMD5Ev+0x18>)
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	0800567c 	.word	0x0800567c

08001790 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	08005734 	.word	0x08005734

080017b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ffe8 	bl	8001790 <_ZN3ros15NodeHandleBase_C1Ev>
 80017c0:	4a36      	ldr	r2, [pc, #216]	; (800189c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3304      	adds	r3, #4
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fe2e 	bl	800142c <_ZN13STM32HardwareC1Ev>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80017f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f003 fd35 	bl	800526c <memset>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f003 fd2c 	bl	800526c <memset>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f603 0324 	addw	r3, r3, #2084	; 0x824
 800181a:	2264      	movs	r2, #100	; 0x64
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f003 fd24 	bl	800526c <memset>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800182a:	2264      	movs	r2, #100	; 0x64
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f003 fd1c 	bl	800526c <memset>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fab8 	bl	8000e00 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	08005708 	.word	0x08005708

080018a0 <HAL_UART_TxCpltCallback>:

std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg);
char hello[] = "Hello world from STM32!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <HAL_UART_TxCpltCallback+0x20>)
 80018aa:	f000 f88a 	bl	80019c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fe21 	bl	80014f8 <_ZN13STM32Hardware5flushEv>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200001b0 	.word	0x200001b0

080018c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80018cc:	4805      	ldr	r0, [pc, #20]	; (80018e4 <HAL_UART_RxCpltCallback+0x20>)
 80018ce:	f000 f878 	bl	80019c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fdd0 	bl	800147a <_ZN13STM32Hardware10reset_rbufEv>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200001b0 	.word	0x200001b0

080018e8 <setup>:

void setup(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  nh.initNode();
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <setup+0x18>)
 80018ee:	f000 f874 	bl	80019da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 80018f2:	4904      	ldr	r1, [pc, #16]	; (8001904 <setup+0x1c>)
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <setup+0x18>)
 80018f6:	f000 f88d 	bl	8001a14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200001b0 	.word	0x200001b0
 8001904:	20000af4 	.word	0x20000af4

08001908 <loop>:

void loop(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0

  str_msg.data = hello;
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <loop+0x24>)
 800190e:	4a08      	ldr	r2, [pc, #32]	; (8001930 <loop+0x28>)
 8001910:	605a      	str	r2, [r3, #4]
  chatter.publish(&str_msg);
 8001912:	4906      	ldr	r1, [pc, #24]	; (800192c <loop+0x24>)
 8001914:	4807      	ldr	r0, [pc, #28]	; (8001934 <loop+0x2c>)
 8001916:	f7ff fd56 	bl	80013c6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  nh.spinOnce();
 800191a:	4807      	ldr	r0, [pc, #28]	; (8001938 <loop+0x30>)
 800191c:	f000 f8aa 	bl	8001a74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

  HAL_Delay(1000);
 8001920:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001924:	f000 ff46 	bl	80027b4 <HAL_Delay>
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000aec 	.word	0x20000aec
 8001930:	20000000 	.word	0x20000000
 8001934:	20000af4 	.word	0x20000af4
 8001938:	200001b0 	.word	0x200001b0

0800193c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d80d      	bhi.n	800196c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	fa22 f103 	lsr.w	r1, r2, r3
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4413      	add	r3, r2
 8001960:	b2ca      	uxtb	r2, r1
 8001962:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	3301      	adds	r3, #1
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	e7ee      	b.n	800194a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b03      	cmp	r3, #3
 8001990:	d811      	bhi.n	80019b6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6839      	ldr	r1, [r7, #0]
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	440a      	add	r2, r1
 800199c:	7812      	ldrb	r2, [r2, #0]
 800199e:	4611      	mov	r1, r2
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	00d2      	lsls	r2, r2, #3
 80019a4:	fa01 f202 	lsl.w	r2, r1, r2
 80019a8:	431a      	orrs	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	3301      	adds	r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	e7ea      	b.n	800198c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3304      	adds	r3, #4
  }
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3304      	adds	r3, #4
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fd3c 	bl	8001464 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2b18      	cmp	r3, #24
 8001a26:	dc1e      	bgt.n	8001a66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d111      	bne.n	8001a5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	60da      	str	r2, [r3, #12]
        return true;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e004      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	3301      	adds	r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	e7dd      	b.n	8001a22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8001a66:	2300      	movs	r3, #0
  }
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3304      	adds	r3, #4
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fddd 	bl	8001640 <_ZN13STM32Hardware4timeEv>
 8001a86:	6138      	str	r0, [r7, #16]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d903      	bls.n	8001aa2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d009      	beq.n	8001ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d903      	bls.n	8001ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bool tx_stop_requested = false;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	75fb      	strb	r3, [r7, #23]
    bool saw_time_msg = false;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	75bb      	strb	r3, [r7, #22]
      if (spin_timeout_ > 0)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d014      	beq.n	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x88>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fdb2 	bl	8001640 <_ZN13STM32Hardware4timeEv>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad2      	subs	r2, r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	bf8c      	ite	hi
 8001aec:	2301      	movhi	r3, #1
 8001aee:	2300      	movls	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x88>
          return SPIN_TIMEOUT;
 8001af6:	f06f 0301 	mvn.w	r3, #1
 8001afa:	e1a5      	b.n	8001e48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
      int data = hardware_.read();
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3304      	adds	r3, #4
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fccb 	bl	800149c <_ZN13STM32Hardware4readEv>
 8001b06:	60f8      	str	r0, [r7, #12]
      if (data < 0)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f2c0 8178 	blt.w	8001e00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x38c>
      checksum_ += data;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	441a      	add	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b26:	2b07      	cmp	r3, #7
 8001b28:	d11e      	bne.n	8001b68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xf4>
        message_in[index_++] = data;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001b30:	1c59      	adds	r1, r3, #1
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	b2d1      	uxtb	r1, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	460a      	mov	r2, r1
 8001b42:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001b4c:	1e5a      	subs	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1b4      	bne.n	8001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_MSG_CHECKSUM;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2208      	movs	r2, #8
 8001b62:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001b66:	e7af      	b.n	8001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_FIRST_FF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d128      	bne.n	8001bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x150>
        if (data == 0xff)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2bff      	cmp	r3, #255	; 0xff
 8001b76:	d10d      	bne.n	8001b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x120>
          mode_++;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	f103 0214 	add.w	r2, r3, #20
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001b92:	e799      	b.n	8001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3304      	adds	r3, #4
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fd51 	bl	8001640 <_ZN13STM32Hardware4timeEv>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	bf8c      	ite	hi
 8001bac:	2301      	movhi	r3, #1
 8001bae:	2300      	movls	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d088      	beq.n	8001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          configured_ = false;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8001bbe:	f06f 0301 	mvn.w	r3, #1
 8001bc2:	e141      	b.n	8001e48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d118      	bne.n	8001c00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18c>
        if (data == PROTOCOL_VER)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2bfe      	cmp	r3, #254	; 0xfe
 8001bd2:	d107      	bne.n	8001be4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x170>
          mode_++;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001be2:	e771      	b.n	8001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_FIRST_FF;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f47f af68 	bne.w	8001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f929 	bl	8001e50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001bfe:	e763      	b.n	8001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d113      	bne.n	8001c32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1be>
        bytes_ = data;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001c30:	e74a      	b.n	8001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d110      	bne.n	8001c5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1ea>
        bytes_ += data << 8;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	021b      	lsls	r3, r3, #8
 8001c46:	441a      	add	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001c5c:	e734      	b.n	8001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d116      	bne.n	8001c96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x222>
        if ((checksum_ % 256) == 255)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001c6e:	425a      	negs	r2, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	bf58      	it	pl
 8001c76:	4253      	negpl	r3, r2
 8001c78:	2bff      	cmp	r3, #255	; 0xff
 8001c7a:	d107      	bne.n	8001c8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x218>
          mode_++;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001c8a:	e71d      	b.n	8001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001c94:	e718      	b.n	8001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c9c:	2b05      	cmp	r3, #5
 8001c9e:	d10f      	bne.n	8001cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24c>
        topic_ = data;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001cbe:	e703      	b.n	8001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d117      	bne.n	8001cfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x286>
        topic_ += data << 8;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	021b      	lsls	r3, r3, #8
 8001cd4:	441a      	add	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2207      	movs	r2, #7
 8001ce0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f47f aeec 	bne.w	8001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_MSG_CHECKSUM;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2208      	movs	r2, #8
 8001cf4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001cf8:	e6e6      	b.n	8001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	f47f aee1 	bne.w	8001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        mode_ = MODE_FIRST_FF;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001d14:	425a      	negs	r2, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	bf58      	it	pl
 8001d1c:	4253      	negpl	r3, r2
 8001d1e:	2bff      	cmp	r3, #255	; 0xff
 8001d20:	f47f aed2 	bne.w	8001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d110      	bne.n	8001d50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2dc>
            requestSyncTime();
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f88e 	bl	8001e50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f8a9 	bl	8001e8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d4e:	e07b      	b.n	8001e48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
          else if (topic_ == TopicInfo::ID_TIME)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d56:	2b0a      	cmp	r3, #10
 8001d58:	d109      	bne.n	8001d6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2fa>
            saw_time_msg = true;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	75bb      	strb	r3, [r7, #22]
            syncTime(message_in);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001d64:	4619      	mov	r1, r3
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f970 	bl	800204c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001d6c:	e6ac      	b.n	8001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d74:	2b06      	cmp	r3, #6
 8001d76:	d10e      	bne.n	8001d96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x322>
            req_param_resp.deserialize(message_in);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001d84:	4619      	mov	r1, r3
 8001d86:	4610      	mov	r0, r2
 8001d88:	f7ff f979 	bl	800107e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001d94:	e698      	b.n	8001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d9c:	2b0b      	cmp	r3, #11
 8001d9e:	d106      	bne.n	8001dae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x33a>
            configured_ = false;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
            tx_stop_requested = true;
 8001da8:	2301      	movs	r3, #1
 8001daa:	75fb      	strb	r3, [r7, #23]
 8001dac:	e68c      	b.n	8001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
            if (subscribers[topic_ - 100])
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001db4:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f43f ae80 	beq.w	8001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
              subscribers[topic_ - 100]->callback(message_in);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001dce:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001dd8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001de2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4798      	blx	r3
    while (true)
 8001dfe:	e663      	b.n	8001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        break;
 8001e00:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00f      	beq.n	8001e2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b8>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d906      	bls.n	8001e2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b8>
      requestSyncTime();
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f816 	bl	8001e50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return saw_time_msg ? SPIN_TIME_RECV : (tx_stop_requested ? SPIN_TX_STOP_REQUESTED : SPIN_OK);
 8001e2c:	7dbb      	ldrb	r3, [r7, #22]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3c4>
 8001e32:	f06f 0303 	mvn.w	r3, #3
 8001e36:	e006      	b.n	8001e46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d2>
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d0>
 8001e3e:	f06f 0302 	mvn.w	r3, #2
 8001e42:	e000      	b.n	8001e46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d2>
 8001e44:	2300      	movs	r3, #0
 8001e46:	bf00      	nop
  }
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001e58:	f107 030c 	add.w	r3, r7, #12
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fc6b 	bl	8000738 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f107 020c 	add.w	r2, r7, #12
 8001e6c:	210a      	movs	r1, #10
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	4798      	blx	r3
    rt_time = hardware_.time();
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3304      	adds	r3, #4
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fbe2 	bl	8001640 <_ZN13STM32Hardware4timeEv>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8001e84:	bf00      	nop
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b08b      	sub	sp, #44	; 0x2c
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fd3d 	bl	8000918 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	2b18      	cmp	r3, #24
 8001ea6:	dc63      	bgt.n	8001f70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d056      	beq.n	8001f68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	6859      	ldr	r1, [r3, #4]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	3308      	adds	r3, #8
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4608      	mov	r0, r1
 8001f08:	4798      	blx	r3
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	6859      	ldr	r1, [r3, #4]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	330c      	adds	r3, #12
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4608      	mov	r0, r1
 8001f36:	4798      	blx	r3
 8001f38:	4603      	mov	r3, r0
 8001f3a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f40:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681c      	ldr	r4, [r3, #0]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fa49 	bl	80013ee <_ZN3ros9Publisher15getEndpointTypeEv>
 8001f5c:	4601      	mov	r1, r0
 8001f5e:	f107 030c 	add.w	r3, r7, #12
 8001f62:	461a      	mov	r2, r3
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6e:	e798      	b.n	8001ea2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001f70:	2300      	movs	r3, #0
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	2b18      	cmp	r3, #24
 8001f78:	dc5f      	bgt.n	800203a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d053      	beq.n	8002032 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001fb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fbc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	3308      	adds	r3, #8
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4608      	mov	r0, r1
 8001fcc:	4798      	blx	r3
 8001fce:	4603      	mov	r3, r0
 8001fd0:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001fda:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	330c      	adds	r3, #12
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4608      	mov	r0, r1
 8001ff2:	4798      	blx	r3
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ffc:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681c      	ldr	r4, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002008:	f202 2222 	addw	r2, r2, #546	; 0x222
 800200c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002014:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	3304      	adds	r3, #4
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4608      	mov	r0, r1
 8002024:	4798      	blx	r3
 8002026:	4601      	mov	r1, r0
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	461a      	mov	r2, r3
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	3301      	adds	r3, #1
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
 8002038:	e79c      	b.n	8001f74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8002042:	bf00      	nop
 8002044:	372c      	adds	r7, #44	; 0x2c
 8002046:	46bd      	mov	sp, r7
 8002048:	bd90      	pop	{r4, r7, pc}
	...

0800204c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8002056:	f107 0308 	add.w	r3, r7, #8
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fb6c 	bl	8000738 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3304      	adds	r3, #4
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff faeb 	bl	8001640 <_ZN13STM32Hardware4timeEv>
 800206a:	4602      	mov	r2, r0
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8002076:	f107 0308 	add.w	r3, r7, #8
 800207a:	6839      	ldr	r1, [r7, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fbcb 	bl	8000818 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	4915      	ldr	r1, [pc, #84]	; (80020dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002088:	fba1 1303 	umull	r1, r3, r1, r3
 800208c:	099b      	lsrs	r3, r3, #6
 800208e:	4413      	add	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002092:	6939      	ldr	r1, [r7, #16]
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002098:	fba3 0302 	umull	r0, r3, r3, r2
 800209c:	099b      	lsrs	r3, r3, #6
 800209e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020a2:	fb00 f303 	mul.w	r3, r0, r3
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	4a0d      	ldr	r2, [pc, #52]	; (80020e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	440b      	add	r3, r1
 80020b0:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80020b2:	f107 0308 	add.w	r3, r7, #8
 80020b6:	3304      	adds	r3, #4
 80020b8:	4619      	mov	r1, r3
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f8a6 	bl	800220c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3304      	adds	r3, #4
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fabb 	bl	8001640 <_ZN13STM32Hardware4timeEv>
 80020ca:	4602      	mov	r2, r0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 80020d2:	bf00      	nop
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	10624dd3 	.word	0x10624dd3
 80020e0:	000f4240 	.word	0x000f4240

080020e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b63      	cmp	r3, #99	; 0x63
 80020f4:	dd09      	ble.n	800210a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80020fc:	f083 0301 	eor.w	r3, r3, #1
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8002106:	2300      	movs	r3, #0
 8002108:	e079      	b.n	80021fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8002116:	3207      	adds	r2, #7
 8002118:	4611      	mov	r1, r2
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4798      	blx	r3
 800211e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	22ff      	movs	r2, #255	; 0xff
 8002124:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	22fe      	movs	r2, #254	; 0xfe
 800212c:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	b29b      	uxth	r3, r3
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	b29b      	uxth	r3, r3
 8002142:	b2da      	uxtb	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8002156:	4413      	add	r3, r2
 8002158:	b2db      	uxtb	r3, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	b2da      	uxtb	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	b21b      	sxth	r3, r3
 8002172:	121b      	asrs	r3, r3, #8
 8002174:	b21b      	sxth	r3, r3
 8002176:	b2da      	uxtb	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002182:	2305      	movs	r3, #5
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3306      	adds	r3, #6
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	429a      	cmp	r2, r3
 800218e:	dc0d      	bgt.n	80021ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4413      	add	r3, r2
 8002196:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	4413      	add	r3, r2
 80021a2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	3301      	adds	r3, #1
 80021a8:	61bb      	str	r3, [r7, #24]
 80021aa:	e7ec      	b.n	8002186 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	3307      	adds	r3, #7
 80021b0:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	425a      	negs	r2, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	bf58      	it	pl
 80021bc:	4253      	negpl	r3, r2
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	1c59      	adds	r1, r3, #1
 80021c4:	6179      	str	r1, [r7, #20]
 80021c6:	43d2      	mvns	r2, r2
 80021c8:	b2d1      	uxtb	r1, r2
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4413      	add	r3, r2
 80021ce:	460a      	mov	r2, r1
 80021d0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021da:	dc0a      	bgt.n	80021f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	1d18      	adds	r0, r3, #4
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4619      	mov	r1, r3
 80021ea:	f7ff f9e3 	bl	80015b4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	e005      	b.n	80021fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80021f2:	4905      	ldr	r1, [pc, #20]	; (8002208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 f849 	bl	800228c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 80021fe:	4618      	mov	r0, r3
 8002200:	3720      	adds	r7, #32
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	080056a0 	.word	0x080056a0

0800220c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3304      	adds	r3, #4
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fa10 	bl	8001640 <_ZN13STM32Hardware4timeEv>
 8002220:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4915      	ldr	r1, [pc, #84]	; (8002280 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800222a:	fba1 1303 	umull	r1, r3, r1, r3
 800222e:	099b      	lsrs	r3, r3, #6
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	1e5a      	subs	r2, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6859      	ldr	r1, [r3, #4]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002242:	fba3 0302 	umull	r0, r3, r3, r2
 8002246:	099b      	lsrs	r3, r3, #6
 8002248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800224c:	fb00 f303 	mul.w	r3, r0, r3
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	4a0c      	ldr	r2, [pc, #48]	; (8002284 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8002254:	fb02 f303 	mul.w	r3, r2, r3
 8002258:	1aca      	subs	r2, r1, r3
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 800225c:	4413      	add	r3, r2
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002270:	4619      	mov	r1, r3
 8002272:	4610      	mov	r0, r2
 8002274:	f7fe f932 	bl	80004dc <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002278:	bf00      	nop
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	10624dd3 	.word	0x10624dd3
 8002284:	000f4240 	.word	0x000f4240
 8002288:	3b9aca00 	.word	0x3b9aca00

0800228c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	2103      	movs	r1, #3
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f804 	bl	80022a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	460b      	mov	r3, r1
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe fcf0 	bl	8000ca0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80022c0:	7afb      	ldrb	r3, [r7, #11]
 80022c2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f107 0214 	add.w	r2, r7, #20
 80022d2:	2107      	movs	r1, #7
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	4798      	blx	r3
  }
 80022d8:	bf00      	nop
 80022da:	3720      	adds	r7, #32
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <_Z41__static_initialization_and_destruction_0ii>:
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d110      	bne.n	8002312 <_Z41__static_initialization_and_destruction_0ii+0x32>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d10b      	bne.n	8002312 <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 80022fa:	4808      	ldr	r0, [pc, #32]	; (800231c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80022fc:	f7ff fa58 	bl	80017b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8002300:	4807      	ldr	r0, [pc, #28]	; (8002320 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002302:	f7ff f9a9 	bl	8001658 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8002306:	2300      	movs	r3, #0
 8002308:	4a05      	ldr	r2, [pc, #20]	; (8002320 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800230a:	4906      	ldr	r1, [pc, #24]	; (8002324 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800230c:	4806      	ldr	r0, [pc, #24]	; (8002328 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800230e:	f7ff f843 	bl	8001398 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	200001b0 	.word	0x200001b0
 8002320:	20000aec 	.word	0x20000aec
 8002324:	080056dc 	.word	0x080056dc
 8002328:	20000af4 	.word	0x20000af4

0800232c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
    return configured_;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <_GLOBAL__sub_I_nh>:
 8002346:	b580      	push	{r7, lr}
 8002348:	af00      	add	r7, sp, #0
 800234a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800234e:	2001      	movs	r0, #1
 8002350:	f7ff ffc6 	bl	80022e0 <_Z41__static_initialization_and_destruction_0ii>
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_MspInit+0x4c>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	4a0f      	ldr	r2, [pc, #60]	; (80023a4 <HAL_MspInit+0x4c>)
 8002368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800236c:	6453      	str	r3, [r2, #68]	; 0x44
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <HAL_MspInit+0x4c>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	603b      	str	r3, [r7, #0]
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_MspInit+0x4c>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	4a08      	ldr	r2, [pc, #32]	; (80023a4 <HAL_MspInit+0x4c>)
 8002384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002388:	6413      	str	r3, [r2, #64]	; 0x40
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_MspInit+0x4c>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800

080023a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a4d      	ldr	r2, [pc, #308]	; (80024fc <HAL_UART_MspInit+0x154>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	f040 8093 	bne.w	80024f2 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023cc:	2300      	movs	r3, #0
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	4b4b      	ldr	r3, [pc, #300]	; (8002500 <HAL_UART_MspInit+0x158>)
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	4a4a      	ldr	r2, [pc, #296]	; (8002500 <HAL_UART_MspInit+0x158>)
 80023d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023da:	6413      	str	r3, [r2, #64]	; 0x40
 80023dc:	4b48      	ldr	r3, [pc, #288]	; (8002500 <HAL_UART_MspInit+0x158>)
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	4b44      	ldr	r3, [pc, #272]	; (8002500 <HAL_UART_MspInit+0x158>)
 80023ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f0:	4a43      	ldr	r2, [pc, #268]	; (8002500 <HAL_UART_MspInit+0x158>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6313      	str	r3, [r2, #48]	; 0x30
 80023f8:	4b41      	ldr	r3, [pc, #260]	; (8002500 <HAL_UART_MspInit+0x158>)
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002404:	230c      	movs	r3, #12
 8002406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002408:	2302      	movs	r3, #2
 800240a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002410:	2303      	movs	r3, #3
 8002412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002414:	2307      	movs	r3, #7
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	4619      	mov	r1, r3
 800241e:	4839      	ldr	r0, [pc, #228]	; (8002504 <HAL_UART_MspInit+0x15c>)
 8002420:	f000 ff00 	bl	8003224 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002424:	4b38      	ldr	r3, [pc, #224]	; (8002508 <HAL_UART_MspInit+0x160>)
 8002426:	4a39      	ldr	r2, [pc, #228]	; (800250c <HAL_UART_MspInit+0x164>)
 8002428:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800242a:	4b37      	ldr	r3, [pc, #220]	; (8002508 <HAL_UART_MspInit+0x160>)
 800242c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002430:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002432:	4b35      	ldr	r3, [pc, #212]	; (8002508 <HAL_UART_MspInit+0x160>)
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002438:	4b33      	ldr	r3, [pc, #204]	; (8002508 <HAL_UART_MspInit+0x160>)
 800243a:	2200      	movs	r2, #0
 800243c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800243e:	4b32      	ldr	r3, [pc, #200]	; (8002508 <HAL_UART_MspInit+0x160>)
 8002440:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002444:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002446:	4b30      	ldr	r3, [pc, #192]	; (8002508 <HAL_UART_MspInit+0x160>)
 8002448:	2200      	movs	r2, #0
 800244a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800244c:	4b2e      	ldr	r3, [pc, #184]	; (8002508 <HAL_UART_MspInit+0x160>)
 800244e:	2200      	movs	r2, #0
 8002450:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002452:	4b2d      	ldr	r3, [pc, #180]	; (8002508 <HAL_UART_MspInit+0x160>)
 8002454:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002458:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800245a:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <HAL_UART_MspInit+0x160>)
 800245c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002460:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002462:	4b29      	ldr	r3, [pc, #164]	; (8002508 <HAL_UART_MspInit+0x160>)
 8002464:	2200      	movs	r2, #0
 8002466:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002468:	4827      	ldr	r0, [pc, #156]	; (8002508 <HAL_UART_MspInit+0x160>)
 800246a:	f000 fad9 	bl	8002a20 <HAL_DMA_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002474:	f7fe f93a 	bl	80006ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a23      	ldr	r2, [pc, #140]	; (8002508 <HAL_UART_MspInit+0x160>)
 800247c:	639a      	str	r2, [r3, #56]	; 0x38
 800247e:	4a22      	ldr	r2, [pc, #136]	; (8002508 <HAL_UART_MspInit+0x160>)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002484:	4b22      	ldr	r3, [pc, #136]	; (8002510 <HAL_UART_MspInit+0x168>)
 8002486:	4a23      	ldr	r2, [pc, #140]	; (8002514 <HAL_UART_MspInit+0x16c>)
 8002488:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800248a:	4b21      	ldr	r3, [pc, #132]	; (8002510 <HAL_UART_MspInit+0x168>)
 800248c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002490:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002492:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <HAL_UART_MspInit+0x168>)
 8002494:	2240      	movs	r2, #64	; 0x40
 8002496:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002498:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <HAL_UART_MspInit+0x168>)
 800249a:	2200      	movs	r2, #0
 800249c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800249e:	4b1c      	ldr	r3, [pc, #112]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024a6:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024ac:	4b18      	ldr	r3, [pc, #96]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80024b2:	4b17      	ldr	r3, [pc, #92]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80024b8:	4b15      	ldr	r3, [pc, #84]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024be:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80024c6:	4812      	ldr	r0, [pc, #72]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024c8:	f000 faaa 	bl	8002a20 <HAL_DMA_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80024d2:	f7fe f90b 	bl	80006ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a0d      	ldr	r2, [pc, #52]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024da:	635a      	str	r2, [r3, #52]	; 0x34
 80024dc:	4a0c      	ldr	r2, [pc, #48]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024e2:	2200      	movs	r2, #0
 80024e4:	2100      	movs	r1, #0
 80024e6:	2026      	movs	r0, #38	; 0x26
 80024e8:	f000 fa63 	bl	80029b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024ec:	2026      	movs	r0, #38	; 0x26
 80024ee:	f000 fa7c 	bl	80029ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024f2:	bf00      	nop
 80024f4:	3728      	adds	r7, #40	; 0x28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40004400 	.word	0x40004400
 8002500:	40023800 	.word	0x40023800
 8002504:	40020000 	.word	0x40020000
 8002508:	200000ec 	.word	0x200000ec
 800250c:	40026088 	.word	0x40026088
 8002510:	2000014c 	.word	0x2000014c
 8002514:	400260a0 	.word	0x400260a0

08002518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800251c:	e7fe      	b.n	800251c <NMI_Handler+0x4>

0800251e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002522:	e7fe      	b.n	8002522 <HardFault_Handler+0x4>

08002524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002528:	e7fe      	b.n	8002528 <MemManage_Handler+0x4>

0800252a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800252e:	e7fe      	b.n	800252e <BusFault_Handler+0x4>

08002530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002534:	e7fe      	b.n	8002534 <UsageFault_Handler+0x4>

08002536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002564:	f000 f906 	bl	8002774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}

0800256c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002570:	4802      	ldr	r0, [pc, #8]	; (800257c <DMA1_Stream5_IRQHandler+0x10>)
 8002572:	f000 fbed 	bl	8002d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200000ec 	.word	0x200000ec

08002580 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002584:	4802      	ldr	r0, [pc, #8]	; (8002590 <DMA1_Stream6_IRQHandler+0x10>)
 8002586:	f000 fbe3 	bl	8002d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	2000014c 	.word	0x2000014c

08002594 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002598:	4802      	ldr	r0, [pc, #8]	; (80025a4 <USART2_IRQHandler+0x10>)
 800259a:	f001 fd33 	bl	8004004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200000a8 	.word	0x200000a8

080025a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return 1;
 80025ac:	2301      	movs	r3, #1
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <_kill>:

int _kill(int pid, int sig)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025c2:	f002 fe1b 	bl	80051fc <__errno>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2216      	movs	r2, #22
 80025ca:	601a      	str	r2, [r3, #0]
  return -1;
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <_exit>:

void _exit (int status)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff ffe7 	bl	80025b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025ea:	e7fe      	b.n	80025ea <_exit+0x12>

080025ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f4:	4a14      	ldr	r2, [pc, #80]	; (8002648 <_sbrk+0x5c>)
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <_sbrk+0x60>)
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <_sbrk+0x64>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d102      	bne.n	800260e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <_sbrk+0x64>)
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <_sbrk+0x68>)
 800260c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <_sbrk+0x64>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	429a      	cmp	r2, r3
 800261a:	d207      	bcs.n	800262c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800261c:	f002 fdee 	bl	80051fc <__errno>
 8002620:	4603      	mov	r3, r0
 8002622:	220c      	movs	r2, #12
 8002624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800262a:	e009      	b.n	8002640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <_sbrk+0x64>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <_sbrk+0x64>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	4a05      	ldr	r2, [pc, #20]	; (8002650 <_sbrk+0x64>)
 800263c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800263e:	68fb      	ldr	r3, [r7, #12]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20020000 	.word	0x20020000
 800264c:	00000400 	.word	0x00000400
 8002650:	20000b08 	.word	0x20000b08
 8002654:	20000b20 	.word	0x20000b20

08002658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <SystemInit+0x20>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	4a05      	ldr	r2, [pc, #20]	; (8002678 <SystemInit+0x20>)
 8002664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800267c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002680:	480d      	ldr	r0, [pc, #52]	; (80026b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002682:	490e      	ldr	r1, [pc, #56]	; (80026bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002684:	4a0e      	ldr	r2, [pc, #56]	; (80026c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002688:	e002      	b.n	8002690 <LoopCopyDataInit>

0800268a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800268a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800268c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800268e:	3304      	adds	r3, #4

08002690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002694:	d3f9      	bcc.n	800268a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002696:	4a0b      	ldr	r2, [pc, #44]	; (80026c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002698:	4c0b      	ldr	r4, [pc, #44]	; (80026c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800269a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800269c:	e001      	b.n	80026a2 <LoopFillZerobss>

0800269e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800269e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a0:	3204      	adds	r2, #4

080026a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a4:	d3fb      	bcc.n	800269e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026a6:	f7ff ffd7 	bl	8002658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026aa:	f002 fdad 	bl	8005208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ae:	f7fd ff41 	bl	8000534 <main>
  bx  lr    
 80026b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026bc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80026c0:	080057ec 	.word	0x080057ec
  ldr r2, =_sbss
 80026c4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80026c8:	20000b20 	.word	0x20000b20

080026cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026cc:	e7fe      	b.n	80026cc <ADC_IRQHandler>
	...

080026d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <HAL_Init+0x40>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0d      	ldr	r2, [pc, #52]	; (8002710 <HAL_Init+0x40>)
 80026da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <HAL_Init+0x40>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <HAL_Init+0x40>)
 80026e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <HAL_Init+0x40>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a07      	ldr	r2, [pc, #28]	; (8002710 <HAL_Init+0x40>)
 80026f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f8:	2003      	movs	r0, #3
 80026fa:	f000 f94f 	bl	800299c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026fe:	200f      	movs	r0, #15
 8002700:	f000 f808 	bl	8002714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002704:	f7ff fe28 	bl	8002358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40023c00 	.word	0x40023c00

08002714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_InitTick+0x54>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b12      	ldr	r3, [pc, #72]	; (800276c <HAL_InitTick+0x58>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	4619      	mov	r1, r3
 8002726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800272a:	fbb3 f3f1 	udiv	r3, r3, r1
 800272e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f967 	bl	8002a06 <HAL_SYSTICK_Config>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e00e      	b.n	8002760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b0f      	cmp	r3, #15
 8002746:	d80a      	bhi.n	800275e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002748:	2200      	movs	r2, #0
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002750:	f000 f92f 	bl	80029b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002754:	4a06      	ldr	r2, [pc, #24]	; (8002770 <HAL_InitTick+0x5c>)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	e000      	b.n	8002760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000018 	.word	0x20000018
 800276c:	20000020 	.word	0x20000020
 8002770:	2000001c 	.word	0x2000001c

08002774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_IncTick+0x20>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_IncTick+0x24>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4413      	add	r3, r2
 8002784:	4a04      	ldr	r2, [pc, #16]	; (8002798 <HAL_IncTick+0x24>)
 8002786:	6013      	str	r3, [r2, #0]
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	20000020 	.word	0x20000020
 8002798:	20000b0c 	.word	0x20000b0c

0800279c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return uwTick;
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <HAL_GetTick+0x14>)
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	20000b0c 	.word	0x20000b0c

080027b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027bc:	f7ff ffee 	bl	800279c <HAL_GetTick>
 80027c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027cc:	d005      	beq.n	80027da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <HAL_Delay+0x44>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4413      	add	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027da:	bf00      	nop
 80027dc:	f7ff ffde 	bl	800279c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d8f7      	bhi.n	80027dc <HAL_Delay+0x28>
  {
  }
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000020 	.word	0x20000020

080027fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002818:	4013      	ands	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800282c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282e:	4a04      	ldr	r2, [pc, #16]	; (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	60d3      	str	r3, [r2, #12]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002848:	4b04      	ldr	r3, [pc, #16]	; (800285c <__NVIC_GetPriorityGrouping+0x18>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	f003 0307 	and.w	r3, r3, #7
}
 8002852:	4618      	mov	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	2b00      	cmp	r3, #0
 8002870:	db0b      	blt.n	800288a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	f003 021f 	and.w	r2, r3, #31
 8002878:	4907      	ldr	r1, [pc, #28]	; (8002898 <__NVIC_EnableIRQ+0x38>)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	2001      	movs	r0, #1
 8002882:	fa00 f202 	lsl.w	r2, r0, r2
 8002886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e000e100 	.word	0xe000e100

0800289c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	6039      	str	r1, [r7, #0]
 80028a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	db0a      	blt.n	80028c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	490c      	ldr	r1, [pc, #48]	; (80028e8 <__NVIC_SetPriority+0x4c>)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	0112      	lsls	r2, r2, #4
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	440b      	add	r3, r1
 80028c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c4:	e00a      	b.n	80028dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	4908      	ldr	r1, [pc, #32]	; (80028ec <__NVIC_SetPriority+0x50>)
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	3b04      	subs	r3, #4
 80028d4:	0112      	lsls	r2, r2, #4
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	440b      	add	r3, r1
 80028da:	761a      	strb	r2, [r3, #24]
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000e100 	.word	0xe000e100
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b089      	sub	sp, #36	; 0x24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f1c3 0307 	rsb	r3, r3, #7
 800290a:	2b04      	cmp	r3, #4
 800290c:	bf28      	it	cs
 800290e:	2304      	movcs	r3, #4
 8002910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3304      	adds	r3, #4
 8002916:	2b06      	cmp	r3, #6
 8002918:	d902      	bls.n	8002920 <NVIC_EncodePriority+0x30>
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3b03      	subs	r3, #3
 800291e:	e000      	b.n	8002922 <NVIC_EncodePriority+0x32>
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43da      	mvns	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	401a      	ands	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002938:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	fa01 f303 	lsl.w	r3, r1, r3
 8002942:	43d9      	mvns	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002948:	4313      	orrs	r3, r2
         );
}
 800294a:	4618      	mov	r0, r3
 800294c:	3724      	adds	r7, #36	; 0x24
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3b01      	subs	r3, #1
 8002964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002968:	d301      	bcc.n	800296e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800296a:	2301      	movs	r3, #1
 800296c:	e00f      	b.n	800298e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800296e:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <SysTick_Config+0x40>)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3b01      	subs	r3, #1
 8002974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002976:	210f      	movs	r1, #15
 8002978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800297c:	f7ff ff8e 	bl	800289c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <SysTick_Config+0x40>)
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002986:	4b04      	ldr	r3, [pc, #16]	; (8002998 <SysTick_Config+0x40>)
 8002988:	2207      	movs	r2, #7
 800298a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	e000e010 	.word	0xe000e010

0800299c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff ff29 	bl	80027fc <__NVIC_SetPriorityGrouping>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b086      	sub	sp, #24
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	4603      	mov	r3, r0
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c4:	f7ff ff3e 	bl	8002844 <__NVIC_GetPriorityGrouping>
 80029c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	6978      	ldr	r0, [r7, #20]
 80029d0:	f7ff ff8e 	bl	80028f0 <NVIC_EncodePriority>
 80029d4:	4602      	mov	r2, r0
 80029d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ff5d 	bl	800289c <__NVIC_SetPriority>
}
 80029e2:	bf00      	nop
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4603      	mov	r3, r0
 80029f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff31 	bl	8002860 <__NVIC_EnableIRQ>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff ffa2 	bl	8002958 <SysTick_Config>
 8002a14:	4603      	mov	r3, r0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a2c:	f7ff feb6 	bl	800279c <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e099      	b.n	8002b70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0201 	bic.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a5c:	e00f      	b.n	8002a7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a5e:	f7ff fe9d 	bl	800279c <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b05      	cmp	r3, #5
 8002a6a:	d908      	bls.n	8002a7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2203      	movs	r2, #3
 8002a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e078      	b.n	8002b70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1e8      	bne.n	8002a5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	4b38      	ldr	r3, [pc, #224]	; (8002b78 <HAL_DMA_Init+0x158>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d107      	bne.n	8002ae8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f023 0307 	bic.w	r3, r3, #7
 8002afe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d117      	bne.n	8002b42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00e      	beq.n	8002b42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fb01 	bl	800312c <DMA_CheckFifoParam>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2240      	movs	r2, #64	; 0x40
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e016      	b.n	8002b70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fab8 	bl	80030c0 <DMA_CalcBaseAndBitshift>
 8002b50:	4603      	mov	r3, r0
 8002b52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b58:	223f      	movs	r2, #63	; 0x3f
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	f010803f 	.word	0xf010803f

08002b7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_DMA_Start_IT+0x26>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e040      	b.n	8002c24 <HAL_DMA_Start_IT+0xa8>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d12f      	bne.n	8002c16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2202      	movs	r2, #2
 8002bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	68b9      	ldr	r1, [r7, #8]
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 fa4a 	bl	8003064 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	223f      	movs	r2, #63	; 0x3f
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0216 	orr.w	r2, r2, #22
 8002bea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d007      	beq.n	8002c04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0208 	orr.w	r2, r2, #8
 8002c02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	e005      	b.n	8002c22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c3a:	f7ff fdaf 	bl	800279c <HAL_GetTick>
 8002c3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d008      	beq.n	8002c5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2280      	movs	r2, #128	; 0x80
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e052      	b.n	8002d04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0216 	bic.w	r2, r2, #22
 8002c6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d103      	bne.n	8002c8e <HAL_DMA_Abort+0x62>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d007      	beq.n	8002c9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0208 	bic.w	r2, r2, #8
 8002c9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0201 	bic.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cae:	e013      	b.n	8002cd8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cb0:	f7ff fd74 	bl	800279c <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b05      	cmp	r3, #5
 8002cbc:	d90c      	bls.n	8002cd8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e015      	b.n	8002d04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1e4      	bne.n	8002cb0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cea:	223f      	movs	r2, #63	; 0x3f
 8002cec:	409a      	lsls	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d004      	beq.n	8002d2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2280      	movs	r2, #128	; 0x80
 8002d24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e00c      	b.n	8002d44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2205      	movs	r2, #5
 8002d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0201 	bic.w	r2, r2, #1
 8002d40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d5c:	4b8e      	ldr	r3, [pc, #568]	; (8002f98 <HAL_DMA_IRQHandler+0x248>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a8e      	ldr	r2, [pc, #568]	; (8002f9c <HAL_DMA_IRQHandler+0x24c>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	0a9b      	lsrs	r3, r3, #10
 8002d68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7a:	2208      	movs	r2, #8
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d01a      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d013      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0204 	bic.w	r2, r2, #4
 8002da2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da8:	2208      	movs	r2, #8
 8002daa:	409a      	lsls	r2, r3
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db4:	f043 0201 	orr.w	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d012      	beq.n	8002df2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00b      	beq.n	8002df2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dde:	2201      	movs	r2, #1
 8002de0:	409a      	lsls	r2, r3
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	f043 0202 	orr.w	r2, r3, #2
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df6:	2204      	movs	r2, #4
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d012      	beq.n	8002e28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00b      	beq.n	8002e28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e14:	2204      	movs	r2, #4
 8002e16:	409a      	lsls	r2, r3
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e20:	f043 0204 	orr.w	r2, r3, #4
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2c:	2210      	movs	r2, #16
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d043      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d03c      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4a:	2210      	movs	r2, #16
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d018      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d108      	bne.n	8002e80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d024      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	4798      	blx	r3
 8002e7e:	e01f      	b.n	8002ec0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d01b      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	4798      	blx	r3
 8002e90:	e016      	b.n	8002ec0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d107      	bne.n	8002eb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0208 	bic.w	r2, r2, #8
 8002eae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 808f 	beq.w	8002ff0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 8087 	beq.w	8002ff0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b05      	cmp	r3, #5
 8002ef8:	d136      	bne.n	8002f68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0216 	bic.w	r2, r2, #22
 8002f08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695a      	ldr	r2, [r3, #20]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d103      	bne.n	8002f2a <HAL_DMA_IRQHandler+0x1da>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d007      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0208 	bic.w	r2, r2, #8
 8002f38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3e:	223f      	movs	r2, #63	; 0x3f
 8002f40:	409a      	lsls	r2, r3
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d07e      	beq.n	800305c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	4798      	blx	r3
        }
        return;
 8002f66:	e079      	b.n	800305c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d01d      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10d      	bne.n	8002fa0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d031      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	4798      	blx	r3
 8002f94:	e02c      	b.n	8002ff0 <HAL_DMA_IRQHandler+0x2a0>
 8002f96:	bf00      	nop
 8002f98:	20000018 	.word	0x20000018
 8002f9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d023      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	4798      	blx	r3
 8002fb0:	e01e      	b.n	8002ff0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10f      	bne.n	8002fe0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0210 	bic.w	r2, r2, #16
 8002fce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d032      	beq.n	800305e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d022      	beq.n	800304a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2205      	movs	r2, #5
 8003008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0201 	bic.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	3301      	adds	r3, #1
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	429a      	cmp	r2, r3
 8003026:	d307      	bcc.n	8003038 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f2      	bne.n	800301c <HAL_DMA_IRQHandler+0x2cc>
 8003036:	e000      	b.n	800303a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003038:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	4798      	blx	r3
 800305a:	e000      	b.n	800305e <HAL_DMA_IRQHandler+0x30e>
        return;
 800305c:	bf00      	nop
    }
  }
}
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003080:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b40      	cmp	r3, #64	; 0x40
 8003090:	d108      	bne.n	80030a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030a2:	e007      	b.n	80030b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	60da      	str	r2, [r3, #12]
}
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	3b10      	subs	r3, #16
 80030d0:	4a14      	ldr	r2, [pc, #80]	; (8003124 <DMA_CalcBaseAndBitshift+0x64>)
 80030d2:	fba2 2303 	umull	r2, r3, r2, r3
 80030d6:	091b      	lsrs	r3, r3, #4
 80030d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030da:	4a13      	ldr	r2, [pc, #76]	; (8003128 <DMA_CalcBaseAndBitshift+0x68>)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4413      	add	r3, r2
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d909      	bls.n	8003102 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030f6:	f023 0303 	bic.w	r3, r3, #3
 80030fa:	1d1a      	adds	r2, r3, #4
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	659a      	str	r2, [r3, #88]	; 0x58
 8003100:	e007      	b.n	8003112 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800310a:	f023 0303 	bic.w	r3, r3, #3
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003116:	4618      	mov	r0, r3
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	aaaaaaab 	.word	0xaaaaaaab
 8003128:	080057d0 	.word	0x080057d0

0800312c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d11f      	bne.n	8003186 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b03      	cmp	r3, #3
 800314a:	d856      	bhi.n	80031fa <DMA_CheckFifoParam+0xce>
 800314c:	a201      	add	r2, pc, #4	; (adr r2, 8003154 <DMA_CheckFifoParam+0x28>)
 800314e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003152:	bf00      	nop
 8003154:	08003165 	.word	0x08003165
 8003158:	08003177 	.word	0x08003177
 800315c:	08003165 	.word	0x08003165
 8003160:	080031fb 	.word	0x080031fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d046      	beq.n	80031fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003174:	e043      	b.n	80031fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800317e:	d140      	bne.n	8003202 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003184:	e03d      	b.n	8003202 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800318e:	d121      	bne.n	80031d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b03      	cmp	r3, #3
 8003194:	d837      	bhi.n	8003206 <DMA_CheckFifoParam+0xda>
 8003196:	a201      	add	r2, pc, #4	; (adr r2, 800319c <DMA_CheckFifoParam+0x70>)
 8003198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319c:	080031ad 	.word	0x080031ad
 80031a0:	080031b3 	.word	0x080031b3
 80031a4:	080031ad 	.word	0x080031ad
 80031a8:	080031c5 	.word	0x080031c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]
      break;
 80031b0:	e030      	b.n	8003214 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d025      	beq.n	800320a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c2:	e022      	b.n	800320a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031cc:	d11f      	bne.n	800320e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031d2:	e01c      	b.n	800320e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d903      	bls.n	80031e2 <DMA_CheckFifoParam+0xb6>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d003      	beq.n	80031e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031e0:	e018      	b.n	8003214 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	73fb      	strb	r3, [r7, #15]
      break;
 80031e6:	e015      	b.n	8003214 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00e      	beq.n	8003212 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
      break;
 80031f8:	e00b      	b.n	8003212 <DMA_CheckFifoParam+0xe6>
      break;
 80031fa:	bf00      	nop
 80031fc:	e00a      	b.n	8003214 <DMA_CheckFifoParam+0xe8>
      break;
 80031fe:	bf00      	nop
 8003200:	e008      	b.n	8003214 <DMA_CheckFifoParam+0xe8>
      break;
 8003202:	bf00      	nop
 8003204:	e006      	b.n	8003214 <DMA_CheckFifoParam+0xe8>
      break;
 8003206:	bf00      	nop
 8003208:	e004      	b.n	8003214 <DMA_CheckFifoParam+0xe8>
      break;
 800320a:	bf00      	nop
 800320c:	e002      	b.n	8003214 <DMA_CheckFifoParam+0xe8>
      break;   
 800320e:	bf00      	nop
 8003210:	e000      	b.n	8003214 <DMA_CheckFifoParam+0xe8>
      break;
 8003212:	bf00      	nop
    }
  } 
  
  return status; 
 8003214:	7bfb      	ldrb	r3, [r7, #15]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop

08003224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003224:	b480      	push	{r7}
 8003226:	b089      	sub	sp, #36	; 0x24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003236:	2300      	movs	r3, #0
 8003238:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	e16b      	b.n	8003518 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003240:	2201      	movs	r2, #1
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	4013      	ands	r3, r2
 8003252:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	429a      	cmp	r2, r3
 800325a:	f040 815a 	bne.w	8003512 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	2b01      	cmp	r3, #1
 8003268:	d005      	beq.n	8003276 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003272:	2b02      	cmp	r3, #2
 8003274:	d130      	bne.n	80032d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	2203      	movs	r2, #3
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032ac:	2201      	movs	r2, #1
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	f003 0201 	and.w	r2, r3, #1
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	d017      	beq.n	8003314 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	2203      	movs	r2, #3
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d123      	bne.n	8003368 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	08da      	lsrs	r2, r3, #3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3208      	adds	r2, #8
 8003328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800332c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	220f      	movs	r2, #15
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4313      	orrs	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	08da      	lsrs	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3208      	adds	r2, #8
 8003362:	69b9      	ldr	r1, [r7, #24]
 8003364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	2203      	movs	r2, #3
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 0203 	and.w	r2, r3, #3
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80b4 	beq.w	8003512 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	4b60      	ldr	r3, [pc, #384]	; (8003530 <HAL_GPIO_Init+0x30c>)
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	4a5f      	ldr	r2, [pc, #380]	; (8003530 <HAL_GPIO_Init+0x30c>)
 80033b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033b8:	6453      	str	r3, [r2, #68]	; 0x44
 80033ba:	4b5d      	ldr	r3, [pc, #372]	; (8003530 <HAL_GPIO_Init+0x30c>)
 80033bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033c6:	4a5b      	ldr	r2, [pc, #364]	; (8003534 <HAL_GPIO_Init+0x310>)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	089b      	lsrs	r3, r3, #2
 80033cc:	3302      	adds	r3, #2
 80033ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	220f      	movs	r2, #15
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4013      	ands	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a52      	ldr	r2, [pc, #328]	; (8003538 <HAL_GPIO_Init+0x314>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d02b      	beq.n	800344a <HAL_GPIO_Init+0x226>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a51      	ldr	r2, [pc, #324]	; (800353c <HAL_GPIO_Init+0x318>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d025      	beq.n	8003446 <HAL_GPIO_Init+0x222>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a50      	ldr	r2, [pc, #320]	; (8003540 <HAL_GPIO_Init+0x31c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d01f      	beq.n	8003442 <HAL_GPIO_Init+0x21e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a4f      	ldr	r2, [pc, #316]	; (8003544 <HAL_GPIO_Init+0x320>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d019      	beq.n	800343e <HAL_GPIO_Init+0x21a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a4e      	ldr	r2, [pc, #312]	; (8003548 <HAL_GPIO_Init+0x324>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d013      	beq.n	800343a <HAL_GPIO_Init+0x216>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a4d      	ldr	r2, [pc, #308]	; (800354c <HAL_GPIO_Init+0x328>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00d      	beq.n	8003436 <HAL_GPIO_Init+0x212>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a4c      	ldr	r2, [pc, #304]	; (8003550 <HAL_GPIO_Init+0x32c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d007      	beq.n	8003432 <HAL_GPIO_Init+0x20e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a4b      	ldr	r2, [pc, #300]	; (8003554 <HAL_GPIO_Init+0x330>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d101      	bne.n	800342e <HAL_GPIO_Init+0x20a>
 800342a:	2307      	movs	r3, #7
 800342c:	e00e      	b.n	800344c <HAL_GPIO_Init+0x228>
 800342e:	2308      	movs	r3, #8
 8003430:	e00c      	b.n	800344c <HAL_GPIO_Init+0x228>
 8003432:	2306      	movs	r3, #6
 8003434:	e00a      	b.n	800344c <HAL_GPIO_Init+0x228>
 8003436:	2305      	movs	r3, #5
 8003438:	e008      	b.n	800344c <HAL_GPIO_Init+0x228>
 800343a:	2304      	movs	r3, #4
 800343c:	e006      	b.n	800344c <HAL_GPIO_Init+0x228>
 800343e:	2303      	movs	r3, #3
 8003440:	e004      	b.n	800344c <HAL_GPIO_Init+0x228>
 8003442:	2302      	movs	r3, #2
 8003444:	e002      	b.n	800344c <HAL_GPIO_Init+0x228>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <HAL_GPIO_Init+0x228>
 800344a:	2300      	movs	r3, #0
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	f002 0203 	and.w	r2, r2, #3
 8003452:	0092      	lsls	r2, r2, #2
 8003454:	4093      	lsls	r3, r2
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800345c:	4935      	ldr	r1, [pc, #212]	; (8003534 <HAL_GPIO_Init+0x310>)
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	3302      	adds	r3, #2
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800346a:	4b3b      	ldr	r3, [pc, #236]	; (8003558 <HAL_GPIO_Init+0x334>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	43db      	mvns	r3, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4013      	ands	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800348e:	4a32      	ldr	r2, [pc, #200]	; (8003558 <HAL_GPIO_Init+0x334>)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003494:	4b30      	ldr	r3, [pc, #192]	; (8003558 <HAL_GPIO_Init+0x334>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034b8:	4a27      	ldr	r2, [pc, #156]	; (8003558 <HAL_GPIO_Init+0x334>)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034be:	4b26      	ldr	r3, [pc, #152]	; (8003558 <HAL_GPIO_Init+0x334>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034e2:	4a1d      	ldr	r2, [pc, #116]	; (8003558 <HAL_GPIO_Init+0x334>)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034e8:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <HAL_GPIO_Init+0x334>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800350c:	4a12      	ldr	r2, [pc, #72]	; (8003558 <HAL_GPIO_Init+0x334>)
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3301      	adds	r3, #1
 8003516:	61fb      	str	r3, [r7, #28]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2b0f      	cmp	r3, #15
 800351c:	f67f ae90 	bls.w	8003240 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	3724      	adds	r7, #36	; 0x24
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40023800 	.word	0x40023800
 8003534:	40013800 	.word	0x40013800
 8003538:	40020000 	.word	0x40020000
 800353c:	40020400 	.word	0x40020400
 8003540:	40020800 	.word	0x40020800
 8003544:	40020c00 	.word	0x40020c00
 8003548:	40021000 	.word	0x40021000
 800354c:	40021400 	.word	0x40021400
 8003550:	40021800 	.word	0x40021800
 8003554:	40021c00 	.word	0x40021c00
 8003558:	40013c00 	.word	0x40013c00

0800355c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e267      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d075      	beq.n	8003666 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800357a:	4b88      	ldr	r3, [pc, #544]	; (800379c <HAL_RCC_OscConfig+0x240>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b04      	cmp	r3, #4
 8003584:	d00c      	beq.n	80035a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003586:	4b85      	ldr	r3, [pc, #532]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800358e:	2b08      	cmp	r3, #8
 8003590:	d112      	bne.n	80035b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003592:	4b82      	ldr	r3, [pc, #520]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800359e:	d10b      	bne.n	80035b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a0:	4b7e      	ldr	r3, [pc, #504]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d05b      	beq.n	8003664 <HAL_RCC_OscConfig+0x108>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d157      	bne.n	8003664 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e242      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c0:	d106      	bne.n	80035d0 <HAL_RCC_OscConfig+0x74>
 80035c2:	4b76      	ldr	r3, [pc, #472]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a75      	ldr	r2, [pc, #468]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	e01d      	b.n	800360c <HAL_RCC_OscConfig+0xb0>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCC_OscConfig+0x98>
 80035da:	4b70      	ldr	r3, [pc, #448]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a6f      	ldr	r2, [pc, #444]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	4b6d      	ldr	r3, [pc, #436]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a6c      	ldr	r2, [pc, #432]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e00b      	b.n	800360c <HAL_RCC_OscConfig+0xb0>
 80035f4:	4b69      	ldr	r3, [pc, #420]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a68      	ldr	r2, [pc, #416]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	4b66      	ldr	r3, [pc, #408]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a65      	ldr	r2, [pc, #404]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800360a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d013      	beq.n	800363c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7ff f8c2 	bl	800279c <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800361c:	f7ff f8be 	bl	800279c <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	; 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e207      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	4b5b      	ldr	r3, [pc, #364]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0xc0>
 800363a:	e014      	b.n	8003666 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7ff f8ae 	bl	800279c <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003644:	f7ff f8aa 	bl	800279c <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	; 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e1f3      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003656:	4b51      	ldr	r3, [pc, #324]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0xe8>
 8003662:	e000      	b.n	8003666 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d063      	beq.n	800373a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003672:	4b4a      	ldr	r3, [pc, #296]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800367e:	4b47      	ldr	r3, [pc, #284]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003686:	2b08      	cmp	r3, #8
 8003688:	d11c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800368a:	4b44      	ldr	r3, [pc, #272]	; (800379c <HAL_RCC_OscConfig+0x240>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d116      	bne.n	80036c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003696:	4b41      	ldr	r3, [pc, #260]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <HAL_RCC_OscConfig+0x152>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d001      	beq.n	80036ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e1c7      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ae:	4b3b      	ldr	r3, [pc, #236]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4937      	ldr	r1, [pc, #220]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c2:	e03a      	b.n	800373a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036cc:	4b34      	ldr	r3, [pc, #208]	; (80037a0 <HAL_RCC_OscConfig+0x244>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d2:	f7ff f863 	bl	800279c <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036da:	f7ff f85f 	bl	800279c <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e1a8      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ec:	4b2b      	ldr	r3, [pc, #172]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f8:	4b28      	ldr	r3, [pc, #160]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4925      	ldr	r1, [pc, #148]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003708:	4313      	orrs	r3, r2
 800370a:	600b      	str	r3, [r1, #0]
 800370c:	e015      	b.n	800373a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800370e:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <HAL_RCC_OscConfig+0x244>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7ff f842 	bl	800279c <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800371c:	f7ff f83e 	bl	800279c <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e187      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372e:	4b1b      	ldr	r3, [pc, #108]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d036      	beq.n	80037b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d016      	beq.n	800377c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800374e:	4b15      	ldr	r3, [pc, #84]	; (80037a4 <HAL_RCC_OscConfig+0x248>)
 8003750:	2201      	movs	r2, #1
 8003752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003754:	f7ff f822 	bl	800279c <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800375c:	f7ff f81e 	bl	800279c <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e167      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0x200>
 800377a:	e01b      	b.n	80037b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800377c:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <HAL_RCC_OscConfig+0x248>)
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003782:	f7ff f80b 	bl	800279c <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003788:	e00e      	b.n	80037a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800378a:	f7ff f807 	bl	800279c <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d907      	bls.n	80037a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e150      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
 800379c:	40023800 	.word	0x40023800
 80037a0:	42470000 	.word	0x42470000
 80037a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a8:	4b88      	ldr	r3, [pc, #544]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80037aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1ea      	bne.n	800378a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8097 	beq.w	80038f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c6:	4b81      	ldr	r3, [pc, #516]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10f      	bne.n	80037f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	4b7d      	ldr	r3, [pc, #500]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	4a7c      	ldr	r2, [pc, #496]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80037dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e0:	6413      	str	r3, [r2, #64]	; 0x40
 80037e2:	4b7a      	ldr	r3, [pc, #488]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ee:	2301      	movs	r3, #1
 80037f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f2:	4b77      	ldr	r3, [pc, #476]	; (80039d0 <HAL_RCC_OscConfig+0x474>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d118      	bne.n	8003830 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037fe:	4b74      	ldr	r3, [pc, #464]	; (80039d0 <HAL_RCC_OscConfig+0x474>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a73      	ldr	r2, [pc, #460]	; (80039d0 <HAL_RCC_OscConfig+0x474>)
 8003804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800380a:	f7fe ffc7 	bl	800279c <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003812:	f7fe ffc3 	bl	800279c <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e10c      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003824:	4b6a      	ldr	r3, [pc, #424]	; (80039d0 <HAL_RCC_OscConfig+0x474>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f0      	beq.n	8003812 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d106      	bne.n	8003846 <HAL_RCC_OscConfig+0x2ea>
 8003838:	4b64      	ldr	r3, [pc, #400]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383c:	4a63      	ldr	r2, [pc, #396]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6713      	str	r3, [r2, #112]	; 0x70
 8003844:	e01c      	b.n	8003880 <HAL_RCC_OscConfig+0x324>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b05      	cmp	r3, #5
 800384c:	d10c      	bne.n	8003868 <HAL_RCC_OscConfig+0x30c>
 800384e:	4b5f      	ldr	r3, [pc, #380]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003852:	4a5e      	ldr	r2, [pc, #376]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003854:	f043 0304 	orr.w	r3, r3, #4
 8003858:	6713      	str	r3, [r2, #112]	; 0x70
 800385a:	4b5c      	ldr	r3, [pc, #368]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385e:	4a5b      	ldr	r2, [pc, #364]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	6713      	str	r3, [r2, #112]	; 0x70
 8003866:	e00b      	b.n	8003880 <HAL_RCC_OscConfig+0x324>
 8003868:	4b58      	ldr	r3, [pc, #352]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800386a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386c:	4a57      	ldr	r2, [pc, #348]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	6713      	str	r3, [r2, #112]	; 0x70
 8003874:	4b55      	ldr	r3, [pc, #340]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	4a54      	ldr	r2, [pc, #336]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800387a:	f023 0304 	bic.w	r3, r3, #4
 800387e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d015      	beq.n	80038b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003888:	f7fe ff88 	bl	800279c <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388e:	e00a      	b.n	80038a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003890:	f7fe ff84 	bl	800279c <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	; 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e0cb      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a6:	4b49      	ldr	r3, [pc, #292]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0ee      	beq.n	8003890 <HAL_RCC_OscConfig+0x334>
 80038b2:	e014      	b.n	80038de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b4:	f7fe ff72 	bl	800279c <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ba:	e00a      	b.n	80038d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038bc:	f7fe ff6e 	bl	800279c <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e0b5      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d2:	4b3e      	ldr	r3, [pc, #248]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80038d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1ee      	bne.n	80038bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038de:	7dfb      	ldrb	r3, [r7, #23]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d105      	bne.n	80038f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e4:	4b39      	ldr	r3, [pc, #228]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	4a38      	ldr	r2, [pc, #224]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80038ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80a1 	beq.w	8003a3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038fa:	4b34      	ldr	r3, [pc, #208]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b08      	cmp	r3, #8
 8003904:	d05c      	beq.n	80039c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d141      	bne.n	8003992 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390e:	4b31      	ldr	r3, [pc, #196]	; (80039d4 <HAL_RCC_OscConfig+0x478>)
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7fe ff42 	bl	800279c <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800391c:	f7fe ff3e 	bl	800279c <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e087      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	4b27      	ldr	r3, [pc, #156]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69da      	ldr	r2, [r3, #28]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	019b      	lsls	r3, r3, #6
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003950:	085b      	lsrs	r3, r3, #1
 8003952:	3b01      	subs	r3, #1
 8003954:	041b      	lsls	r3, r3, #16
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	061b      	lsls	r3, r3, #24
 800395e:	491b      	ldr	r1, [pc, #108]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003964:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_RCC_OscConfig+0x478>)
 8003966:	2201      	movs	r2, #1
 8003968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396a:	f7fe ff17 	bl	800279c <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003972:	f7fe ff13 	bl	800279c <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e05c      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003984:	4b11      	ldr	r3, [pc, #68]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCC_OscConfig+0x416>
 8003990:	e054      	b.n	8003a3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003992:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <HAL_RCC_OscConfig+0x478>)
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7fe ff00 	bl	800279c <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a0:	f7fe fefc 	bl	800279c <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e045      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b2:	4b06      	ldr	r3, [pc, #24]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x444>
 80039be:	e03d      	b.n	8003a3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d107      	bne.n	80039d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e038      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40007000 	.word	0x40007000
 80039d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039d8:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <HAL_RCC_OscConfig+0x4ec>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d028      	beq.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d121      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d11a      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a08:	4013      	ands	r3, r2
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d111      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1e:	085b      	lsrs	r3, r3, #1
 8003a20:	3b01      	subs	r3, #1
 8003a22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d107      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40023800 	.word	0x40023800

08003a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0cc      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a60:	4b68      	ldr	r3, [pc, #416]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d90c      	bls.n	8003a88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6e:	4b65      	ldr	r3, [pc, #404]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a76:	4b63      	ldr	r3, [pc, #396]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0b8      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d020      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aa0:	4b59      	ldr	r3, [pc, #356]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4a58      	ldr	r2, [pc, #352]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003aaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ab8:	4b53      	ldr	r3, [pc, #332]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4a52      	ldr	r2, [pc, #328]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ac2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac4:	4b50      	ldr	r3, [pc, #320]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	494d      	ldr	r1, [pc, #308]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d044      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d107      	bne.n	8003afa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	4b47      	ldr	r3, [pc, #284]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d119      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e07f      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d003      	beq.n	8003b0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0a:	4b3f      	ldr	r3, [pc, #252]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d109      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e06f      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1a:	4b3b      	ldr	r3, [pc, #236]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e067      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b2a:	4b37      	ldr	r3, [pc, #220]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f023 0203 	bic.w	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	4934      	ldr	r1, [pc, #208]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b3c:	f7fe fe2e 	bl	800279c <HAL_GetTick>
 8003b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b44:	f7fe fe2a 	bl	800279c <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e04f      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5a:	4b2b      	ldr	r3, [pc, #172]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 020c 	and.w	r2, r3, #12
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d1eb      	bne.n	8003b44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b6c:	4b25      	ldr	r3, [pc, #148]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d20c      	bcs.n	8003b94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7a:	4b22      	ldr	r3, [pc, #136]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b82:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e032      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba0:	4b19      	ldr	r3, [pc, #100]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4916      	ldr	r1, [pc, #88]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d009      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bbe:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	490e      	ldr	r1, [pc, #56]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bd2:	f000 f821 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	091b      	lsrs	r3, r3, #4
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	490a      	ldr	r1, [pc, #40]	; (8003c0c <HAL_RCC_ClockConfig+0x1c0>)
 8003be4:	5ccb      	ldrb	r3, [r1, r3]
 8003be6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bea:	4a09      	ldr	r2, [pc, #36]	; (8003c10 <HAL_RCC_ClockConfig+0x1c4>)
 8003bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bee:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fe fd8e 	bl	8002714 <HAL_InitTick>

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40023c00 	.word	0x40023c00
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	080057b8 	.word	0x080057b8
 8003c10:	20000018 	.word	0x20000018
 8003c14:	2000001c 	.word	0x2000001c

08003c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c1c:	b090      	sub	sp, #64	; 0x40
 8003c1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	637b      	str	r3, [r7, #52]	; 0x34
 8003c24:	2300      	movs	r3, #0
 8003c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c28:	2300      	movs	r3, #0
 8003c2a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c30:	4b59      	ldr	r3, [pc, #356]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 030c 	and.w	r3, r3, #12
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d00d      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0x40>
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	f200 80a1 	bhi.w	8003d84 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_RCC_GetSysClockFreq+0x34>
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d003      	beq.n	8003c52 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c4a:	e09b      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c4c:	4b53      	ldr	r3, [pc, #332]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x184>)
 8003c4e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c50:	e09b      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c52:	4b53      	ldr	r3, [pc, #332]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c56:	e098      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c58:	4b4f      	ldr	r3, [pc, #316]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c60:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c62:	4b4d      	ldr	r3, [pc, #308]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d028      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c6e:	4b4a      	ldr	r3, [pc, #296]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	099b      	lsrs	r3, r3, #6
 8003c74:	2200      	movs	r2, #0
 8003c76:	623b      	str	r3, [r7, #32]
 8003c78:	627a      	str	r2, [r7, #36]	; 0x24
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c80:	2100      	movs	r1, #0
 8003c82:	4b47      	ldr	r3, [pc, #284]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c84:	fb03 f201 	mul.w	r2, r3, r1
 8003c88:	2300      	movs	r3, #0
 8003c8a:	fb00 f303 	mul.w	r3, r0, r3
 8003c8e:	4413      	add	r3, r2
 8003c90:	4a43      	ldr	r2, [pc, #268]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c92:	fba0 1202 	umull	r1, r2, r0, r2
 8003c96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c98:	460a      	mov	r2, r1
 8003c9a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c9e:	4413      	add	r3, r2
 8003ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	61bb      	str	r3, [r7, #24]
 8003ca8:	61fa      	str	r2, [r7, #28]
 8003caa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003cb2:	f7fc fa91 	bl	80001d8 <__aeabi_uldivmod>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4613      	mov	r3, r2
 8003cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cbe:	e053      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc0:	4b35      	ldr	r3, [pc, #212]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	099b      	lsrs	r3, r3, #6
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	617a      	str	r2, [r7, #20]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003cd2:	f04f 0b00 	mov.w	fp, #0
 8003cd6:	4652      	mov	r2, sl
 8003cd8:	465b      	mov	r3, fp
 8003cda:	f04f 0000 	mov.w	r0, #0
 8003cde:	f04f 0100 	mov.w	r1, #0
 8003ce2:	0159      	lsls	r1, r3, #5
 8003ce4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ce8:	0150      	lsls	r0, r2, #5
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	ebb2 080a 	subs.w	r8, r2, sl
 8003cf2:	eb63 090b 	sbc.w	r9, r3, fp
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	f04f 0300 	mov.w	r3, #0
 8003cfe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d02:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d06:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d0a:	ebb2 0408 	subs.w	r4, r2, r8
 8003d0e:	eb63 0509 	sbc.w	r5, r3, r9
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	00eb      	lsls	r3, r5, #3
 8003d1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d20:	00e2      	lsls	r2, r4, #3
 8003d22:	4614      	mov	r4, r2
 8003d24:	461d      	mov	r5, r3
 8003d26:	eb14 030a 	adds.w	r3, r4, sl
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	eb45 030b 	adc.w	r3, r5, fp
 8003d30:	607b      	str	r3, [r7, #4]
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d3e:	4629      	mov	r1, r5
 8003d40:	028b      	lsls	r3, r1, #10
 8003d42:	4621      	mov	r1, r4
 8003d44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d48:	4621      	mov	r1, r4
 8003d4a:	028a      	lsls	r2, r1, #10
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d52:	2200      	movs	r2, #0
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	60fa      	str	r2, [r7, #12]
 8003d58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d5c:	f7fc fa3c 	bl	80001d8 <__aeabi_uldivmod>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4613      	mov	r3, r2
 8003d66:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d68:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	0c1b      	lsrs	r3, r3, #16
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	3301      	adds	r3, #1
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d82:	e002      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x184>)
 8003d86:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3740      	adds	r7, #64	; 0x40
 8003d90:	46bd      	mov	sp, r7
 8003d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d96:	bf00      	nop
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	00f42400 	.word	0x00f42400
 8003da0:	017d7840 	.word	0x017d7840

08003da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da8:	4b03      	ldr	r3, [pc, #12]	; (8003db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003daa:	681b      	ldr	r3, [r3, #0]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	20000018 	.word	0x20000018

08003dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dc0:	f7ff fff0 	bl	8003da4 <HAL_RCC_GetHCLKFreq>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	0a9b      	lsrs	r3, r3, #10
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	4903      	ldr	r1, [pc, #12]	; (8003de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dd2:	5ccb      	ldrb	r3, [r1, r3]
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	080057c8 	.word	0x080057c8

08003de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003de8:	f7ff ffdc 	bl	8003da4 <HAL_RCC_GetHCLKFreq>
 8003dec:	4602      	mov	r2, r0
 8003dee:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	0b5b      	lsrs	r3, r3, #13
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	4903      	ldr	r1, [pc, #12]	; (8003e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dfa:	5ccb      	ldrb	r3, [r1, r3]
 8003dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40023800 	.word	0x40023800
 8003e08:	080057c8 	.word	0x080057c8

08003e0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e03f      	b.n	8003e9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fe fab8 	bl	80023a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2224      	movs	r2, #36	; 0x24
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 ff43 	bl	8004cdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695a      	ldr	r2, [r3, #20]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08c      	sub	sp, #48	; 0x30
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b20      	cmp	r3, #32
 8003ec0:	d165      	bne.n	8003f8e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <HAL_UART_Transmit_DMA+0x26>
 8003ec8:	88fb      	ldrh	r3, [r7, #6]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e05e      	b.n	8003f90 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_UART_Transmit_DMA+0x38>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e057      	b.n	8003f90 <HAL_UART_Transmit_DMA+0xe8>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	88fa      	ldrh	r2, [r7, #6]
 8003ef2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	88fa      	ldrh	r2, [r7, #6]
 8003ef8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2221      	movs	r2, #33	; 0x21
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0c:	4a22      	ldr	r2, [pc, #136]	; (8003f98 <HAL_UART_Transmit_DMA+0xf0>)
 8003f0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f14:	4a21      	ldr	r2, [pc, #132]	; (8003f9c <HAL_UART_Transmit_DMA+0xf4>)
 8003f16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1c:	4a20      	ldr	r2, [pc, #128]	; (8003fa0 <HAL_UART_Transmit_DMA+0xf8>)
 8003f1e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f24:	2200      	movs	r2, #0
 8003f26:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003f28:	f107 0308 	add.w	r3, r7, #8
 8003f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f34:	6819      	ldr	r1, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	88fb      	ldrh	r3, [r7, #6]
 8003f40:	f7fe fe1c 	bl	8002b7c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f4c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3314      	adds	r3, #20
 8003f5c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	e853 3f00 	ldrex	r3, [r3]
 8003f64:	617b      	str	r3, [r7, #20]
   return(result);
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3314      	adds	r3, #20
 8003f74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f76:	627a      	str	r2, [r7, #36]	; 0x24
 8003f78:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7a:	6a39      	ldr	r1, [r7, #32]
 8003f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7e:	e841 2300 	strex	r3, r2, [r1]
 8003f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1e5      	bne.n	8003f56 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	e000      	b.n	8003f90 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003f8e:	2302      	movs	r3, #2
  }
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3730      	adds	r7, #48	; 0x30
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	08004575 	.word	0x08004575
 8003f9c:	0800460f 	.word	0x0800460f
 8003fa0:	08004787 	.word	0x08004787

08003fa4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b20      	cmp	r3, #32
 8003fbc:	d11d      	bne.n	8003ffa <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_UART_Receive_DMA+0x26>
 8003fc4:	88fb      	ldrh	r3, [r7, #6]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e016      	b.n	8003ffc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_UART_Receive_DMA+0x38>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e00f      	b.n	8003ffc <HAL_UART_Receive_DMA+0x58>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003fea:	88fb      	ldrh	r3, [r7, #6]
 8003fec:	461a      	mov	r2, r3
 8003fee:	68b9      	ldr	r1, [r7, #8]
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 fc13 	bl	800481c <UART_Start_Receive_DMA>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	e000      	b.n	8003ffc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003ffa:	2302      	movs	r3, #2
  }
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b0ba      	sub	sp, #232	; 0xe8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800402a:	2300      	movs	r3, #0
 800402c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004030:	2300      	movs	r3, #0
 8004032:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004042:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10f      	bne.n	800406a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800404a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b00      	cmp	r3, #0
 8004054:	d009      	beq.n	800406a <HAL_UART_IRQHandler+0x66>
 8004056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800405a:	f003 0320 	and.w	r3, r3, #32
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fd7f 	bl	8004b66 <UART_Receive_IT>
      return;
 8004068:	e256      	b.n	8004518 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800406a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 80de 	beq.w	8004230 <HAL_UART_IRQHandler+0x22c>
 8004074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d106      	bne.n	800408e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004084:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 80d1 	beq.w	8004230 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800408e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00b      	beq.n	80040b2 <HAL_UART_IRQHandler+0xae>
 800409a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800409e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	f043 0201 	orr.w	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00b      	beq.n	80040d6 <HAL_UART_IRQHandler+0xd2>
 80040be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f043 0202 	orr.w	r2, r3, #2
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00b      	beq.n	80040fa <HAL_UART_IRQHandler+0xf6>
 80040e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f043 0204 	orr.w	r2, r3, #4
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d011      	beq.n	800412a <HAL_UART_IRQHandler+0x126>
 8004106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b00      	cmp	r3, #0
 8004110:	d105      	bne.n	800411e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d005      	beq.n	800412a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	f043 0208 	orr.w	r2, r3, #8
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 81ed 	beq.w	800450e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_UART_IRQHandler+0x14e>
 8004140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004144:	f003 0320 	and.w	r3, r3, #32
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 fd0a 	bl	8004b66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415c:	2b40      	cmp	r3, #64	; 0x40
 800415e:	bf0c      	ite	eq
 8004160:	2301      	moveq	r3, #1
 8004162:	2300      	movne	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d103      	bne.n	800417e <HAL_UART_IRQHandler+0x17a>
 8004176:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800417a:	2b00      	cmp	r3, #0
 800417c:	d04f      	beq.n	800421e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fc12 	bl	80049a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d141      	bne.n	8004216 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3314      	adds	r3, #20
 8004198:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80041a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3314      	adds	r3, #20
 80041ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80041be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80041c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80041ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80041d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1d9      	bne.n	8004192 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d013      	beq.n	800420e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	4a7d      	ldr	r2, [pc, #500]	; (80043e0 <HAL_UART_IRQHandler+0x3dc>)
 80041ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fe fd8a 	bl	8002d0c <HAL_DMA_Abort_IT>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d016      	beq.n	800422c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004208:	4610      	mov	r0, r2
 800420a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800420c:	e00e      	b.n	800422c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f99a 	bl	8004548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004214:	e00a      	b.n	800422c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f996 	bl	8004548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800421c:	e006      	b.n	800422c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f992 	bl	8004548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800422a:	e170      	b.n	800450e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422c:	bf00      	nop
    return;
 800422e:	e16e      	b.n	800450e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	2b01      	cmp	r3, #1
 8004236:	f040 814a 	bne.w	80044ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800423a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800423e:	f003 0310 	and.w	r3, r3, #16
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 8143 	beq.w	80044ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800424c:	f003 0310 	and.w	r3, r3, #16
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 813c 	beq.w	80044ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004256:	2300      	movs	r3, #0
 8004258:	60bb      	str	r3, [r7, #8]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	60bb      	str	r3, [r7, #8]
 800426a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004276:	2b40      	cmp	r3, #64	; 0x40
 8004278:	f040 80b4 	bne.w	80043e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004288:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 8140 	beq.w	8004512 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004296:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800429a:	429a      	cmp	r2, r3
 800429c:	f080 8139 	bcs.w	8004512 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b2:	f000 8088 	beq.w	80043c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	330c      	adds	r3, #12
 80042bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80042cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	330c      	adds	r3, #12
 80042de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80042e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80042ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80042fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1d9      	bne.n	80042b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3314      	adds	r3, #20
 8004308:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800430c:	e853 3f00 	ldrex	r3, [r3]
 8004310:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004312:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004314:	f023 0301 	bic.w	r3, r3, #1
 8004318:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3314      	adds	r3, #20
 8004322:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004326:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800432a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800432e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004332:	e841 2300 	strex	r3, r2, [r1]
 8004336:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1e1      	bne.n	8004302 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3314      	adds	r3, #20
 8004344:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004346:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004348:	e853 3f00 	ldrex	r3, [r3]
 800434c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800434e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3314      	adds	r3, #20
 800435e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004362:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004364:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004368:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e3      	bne.n	800433e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	330c      	adds	r3, #12
 800438a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800438e:	e853 3f00 	ldrex	r3, [r3]
 8004392:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004396:	f023 0310 	bic.w	r3, r3, #16
 800439a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	330c      	adds	r3, #12
 80043a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80043a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80043aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043b0:	e841 2300 	strex	r3, r2, [r1]
 80043b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e3      	bne.n	8004384 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fe fc33 	bl	8002c2c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	4619      	mov	r1, r3
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f8c0 	bl	800455c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043dc:	e099      	b.n	8004512 <HAL_UART_IRQHandler+0x50e>
 80043de:	bf00      	nop
 80043e0:	08004a6f 	.word	0x08004a6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 808b 	beq.w	8004516 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004400:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 8086 	beq.w	8004516 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	330c      	adds	r3, #12
 8004410:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004414:	e853 3f00 	ldrex	r3, [r3]
 8004418:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800441a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004420:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	330c      	adds	r3, #12
 800442a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800442e:	647a      	str	r2, [r7, #68]	; 0x44
 8004430:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004432:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004434:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004436:	e841 2300 	strex	r3, r2, [r1]
 800443a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800443c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e3      	bne.n	800440a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3314      	adds	r3, #20
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	e853 3f00 	ldrex	r3, [r3]
 8004450:	623b      	str	r3, [r7, #32]
   return(result);
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	f023 0301 	bic.w	r3, r3, #1
 8004458:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3314      	adds	r3, #20
 8004462:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004466:	633a      	str	r2, [r7, #48]	; 0x30
 8004468:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800446c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e3      	bne.n	8004442 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	330c      	adds	r3, #12
 800448e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	e853 3f00 	ldrex	r3, [r3]
 8004496:	60fb      	str	r3, [r7, #12]
   return(result);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0310 	bic.w	r3, r3, #16
 800449e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	330c      	adds	r3, #12
 80044a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80044ac:	61fa      	str	r2, [r7, #28]
 80044ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	69b9      	ldr	r1, [r7, #24]
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	617b      	str	r3, [r7, #20]
   return(result);
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e3      	bne.n	8004488 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044c4:	4619      	mov	r1, r3
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f848 	bl	800455c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044cc:	e023      	b.n	8004516 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d009      	beq.n	80044ee <HAL_UART_IRQHandler+0x4ea>
 80044da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fad5 	bl	8004a96 <UART_Transmit_IT>
    return;
 80044ec:	e014      	b.n	8004518 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00e      	beq.n	8004518 <HAL_UART_IRQHandler+0x514>
 80044fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d008      	beq.n	8004518 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fb15 	bl	8004b36 <UART_EndTransmit_IT>
    return;
 800450c:	e004      	b.n	8004518 <HAL_UART_IRQHandler+0x514>
    return;
 800450e:	bf00      	nop
 8004510:	e002      	b.n	8004518 <HAL_UART_IRQHandler+0x514>
      return;
 8004512:	bf00      	nop
 8004514:	e000      	b.n	8004518 <HAL_UART_IRQHandler+0x514>
      return;
 8004516:	bf00      	nop
  }
}
 8004518:	37e8      	adds	r7, #232	; 0xe8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop

08004520 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b090      	sub	sp, #64	; 0x40
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d137      	bne.n	8004600 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004592:	2200      	movs	r2, #0
 8004594:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3314      	adds	r3, #20
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	623b      	str	r3, [r7, #32]
   return(result);
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80045ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3314      	adds	r3, #20
 80045b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045b6:	633a      	str	r2, [r7, #48]	; 0x30
 80045b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e5      	bne.n	8004596 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	330c      	adds	r3, #12
 80045d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045e0:	637b      	str	r3, [r7, #52]	; 0x34
 80045e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	330c      	adds	r3, #12
 80045e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045ea:	61fa      	str	r2, [r7, #28]
 80045ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	69b9      	ldr	r1, [r7, #24]
 80045f0:	69fa      	ldr	r2, [r7, #28]
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	617b      	str	r3, [r7, #20]
   return(result);
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e5      	bne.n	80045ca <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045fe:	e002      	b.n	8004606 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004600:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004602:	f7fd f94d 	bl	80018a0 <HAL_UART_TxCpltCallback>
}
 8004606:	bf00      	nop
 8004608:	3740      	adds	r7, #64	; 0x40
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b084      	sub	sp, #16
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f7ff ff7f 	bl	8004520 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004622:	bf00      	nop
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b09c      	sub	sp, #112	; 0x70
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004636:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d172      	bne.n	800472c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004648:	2200      	movs	r2, #0
 800464a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800464c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	330c      	adds	r3, #12
 8004652:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004656:	e853 3f00 	ldrex	r3, [r3]
 800465a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800465c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800465e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004662:	66bb      	str	r3, [r7, #104]	; 0x68
 8004664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	330c      	adds	r3, #12
 800466a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800466c:	65ba      	str	r2, [r7, #88]	; 0x58
 800466e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004670:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004672:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004674:	e841 2300 	strex	r3, r2, [r1]
 8004678:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800467a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e5      	bne.n	800464c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3314      	adds	r3, #20
 8004686:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468a:	e853 3f00 	ldrex	r3, [r3]
 800468e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004692:	f023 0301 	bic.w	r3, r3, #1
 8004696:	667b      	str	r3, [r7, #100]	; 0x64
 8004698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3314      	adds	r3, #20
 800469e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80046a0:	647a      	str	r2, [r7, #68]	; 0x44
 80046a2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046a8:	e841 2300 	strex	r3, r2, [r1]
 80046ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1e5      	bne.n	8004680 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3314      	adds	r3, #20
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	e853 3f00 	ldrex	r3, [r3]
 80046c2:	623b      	str	r3, [r7, #32]
   return(result);
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ca:	663b      	str	r3, [r7, #96]	; 0x60
 80046cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3314      	adds	r3, #20
 80046d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046d4:	633a      	str	r2, [r7, #48]	; 0x30
 80046d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046dc:	e841 2300 	strex	r3, r2, [r1]
 80046e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1e5      	bne.n	80046b4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d119      	bne.n	800472c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	60fb      	str	r3, [r7, #12]
   return(result);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0310 	bic.w	r3, r3, #16
 800470e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004718:	61fa      	str	r2, [r7, #28]
 800471a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	69b9      	ldr	r1, [r7, #24]
 800471e:	69fa      	ldr	r2, [r7, #28]
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	617b      	str	r3, [r7, #20]
   return(result);
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e5      	bne.n	80046f8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800472c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	2b01      	cmp	r3, #1
 8004732:	d106      	bne.n	8004742 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004736:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004738:	4619      	mov	r1, r3
 800473a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800473c:	f7ff ff0e 	bl	800455c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004740:	e002      	b.n	8004748 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004742:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004744:	f7fd f8be 	bl	80018c4 <HAL_UART_RxCpltCallback>
}
 8004748:	bf00      	nop
 800474a:	3770      	adds	r7, #112	; 0x70
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	2b01      	cmp	r3, #1
 8004764:	d108      	bne.n	8004778 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800476a:	085b      	lsrs	r3, r3, #1
 800476c:	b29b      	uxth	r3, r3
 800476e:	4619      	mov	r1, r3
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f7ff fef3 	bl	800455c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004776:	e002      	b.n	800477e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f7ff fedb 	bl	8004534 <HAL_UART_RxHalfCpltCallback>
}
 800477e:	bf00      	nop
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800478e:	2300      	movs	r3, #0
 8004790:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a2:	2b80      	cmp	r3, #128	; 0x80
 80047a4:	bf0c      	ite	eq
 80047a6:	2301      	moveq	r3, #1
 80047a8:	2300      	movne	r3, #0
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b21      	cmp	r3, #33	; 0x21
 80047b8:	d108      	bne.n	80047cc <UART_DMAError+0x46>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2200      	movs	r2, #0
 80047c4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80047c6:	68b8      	ldr	r0, [r7, #8]
 80047c8:	f000 f8c6 	bl	8004958 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d6:	2b40      	cmp	r3, #64	; 0x40
 80047d8:	bf0c      	ite	eq
 80047da:	2301      	moveq	r3, #1
 80047dc:	2300      	movne	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b22      	cmp	r3, #34	; 0x22
 80047ec:	d108      	bne.n	8004800 <UART_DMAError+0x7a>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2200      	movs	r2, #0
 80047f8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80047fa:	68b8      	ldr	r0, [r7, #8]
 80047fc:	f000 f8d4 	bl	80049a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	f043 0210 	orr.w	r2, r3, #16
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800480c:	68b8      	ldr	r0, [r7, #8]
 800480e:	f7ff fe9b 	bl	8004548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004812:	bf00      	nop
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b098      	sub	sp, #96	; 0x60
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	4613      	mov	r3, r2
 8004828:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	88fa      	ldrh	r2, [r7, #6]
 8004834:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2222      	movs	r2, #34	; 0x22
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	4a40      	ldr	r2, [pc, #256]	; (800494c <UART_Start_Receive_DMA+0x130>)
 800484a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004850:	4a3f      	ldr	r2, [pc, #252]	; (8004950 <UART_Start_Receive_DMA+0x134>)
 8004852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004858:	4a3e      	ldr	r2, [pc, #248]	; (8004954 <UART_Start_Receive_DMA+0x138>)
 800485a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	2200      	movs	r2, #0
 8004862:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004864:	f107 0308 	add.w	r3, r7, #8
 8004868:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3304      	adds	r3, #4
 8004874:	4619      	mov	r1, r3
 8004876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	88fb      	ldrh	r3, [r7, #6]
 800487c:	f7fe f97e 	bl	8002b7c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004880:	2300      	movs	r3, #0
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	613b      	str	r3, [r7, #16]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d019      	beq.n	80048da <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	330c      	adds	r3, #12
 80048ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b0:	e853 3f00 	ldrex	r3, [r3]
 80048b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	330c      	adds	r3, #12
 80048c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048c6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80048c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80048cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80048d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e5      	bne.n	80048a6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3314      	adds	r3, #20
 80048e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	657b      	str	r3, [r7, #84]	; 0x54
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3314      	adds	r3, #20
 80048f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80048fa:	63ba      	str	r2, [r7, #56]	; 0x38
 80048fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004902:	e841 2300 	strex	r3, r2, [r1]
 8004906:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e5      	bne.n	80048da <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	3314      	adds	r3, #20
 8004914:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	e853 3f00 	ldrex	r3, [r3]
 800491c:	617b      	str	r3, [r7, #20]
   return(result);
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004924:	653b      	str	r3, [r7, #80]	; 0x50
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3314      	adds	r3, #20
 800492c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800492e:	627a      	str	r2, [r7, #36]	; 0x24
 8004930:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004932:	6a39      	ldr	r1, [r7, #32]
 8004934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004936:	e841 2300 	strex	r3, r2, [r1]
 800493a:	61fb      	str	r3, [r7, #28]
   return(result);
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1e5      	bne.n	800490e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3760      	adds	r7, #96	; 0x60
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	0800462b 	.word	0x0800462b
 8004950:	08004751 	.word	0x08004751
 8004954:	08004787 	.word	0x08004787

08004958 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004958:	b480      	push	{r7}
 800495a:	b089      	sub	sp, #36	; 0x24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	330c      	adds	r3, #12
 8004966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004976:	61fb      	str	r3, [r7, #28]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	330c      	adds	r3, #12
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	61ba      	str	r2, [r7, #24]
 8004982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	6979      	ldr	r1, [r7, #20]
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	613b      	str	r3, [r7, #16]
   return(result);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e5      	bne.n	8004960 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800499c:	bf00      	nop
 800499e:	3724      	adds	r7, #36	; 0x24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b095      	sub	sp, #84	; 0x54
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	330c      	adds	r3, #12
 80049b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ba:	e853 3f00 	ldrex	r3, [r3]
 80049be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	330c      	adds	r3, #12
 80049ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049d0:	643a      	str	r2, [r7, #64]	; 0x40
 80049d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049d8:	e841 2300 	strex	r3, r2, [r1]
 80049dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e5      	bne.n	80049b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3314      	adds	r3, #20
 80049ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	e853 3f00 	ldrex	r3, [r3]
 80049f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	f023 0301 	bic.w	r3, r3, #1
 80049fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3314      	adds	r3, #20
 8004a02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a0c:	e841 2300 	strex	r3, r2, [r1]
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1e5      	bne.n	80049e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d119      	bne.n	8004a54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	330c      	adds	r3, #12
 8004a26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	e853 3f00 	ldrex	r3, [r3]
 8004a2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f023 0310 	bic.w	r3, r3, #16
 8004a36:	647b      	str	r3, [r7, #68]	; 0x44
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	330c      	adds	r3, #12
 8004a3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a40:	61ba      	str	r2, [r7, #24]
 8004a42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a44:	6979      	ldr	r1, [r7, #20]
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	e841 2300 	strex	r3, r2, [r1]
 8004a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e5      	bne.n	8004a20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a62:	bf00      	nop
 8004a64:	3754      	adds	r7, #84	; 0x54
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b084      	sub	sp, #16
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f7ff fd5d 	bl	8004548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a8e:	bf00      	nop
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b085      	sub	sp, #20
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b21      	cmp	r3, #33	; 0x21
 8004aa8:	d13e      	bne.n	8004b28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab2:	d114      	bne.n	8004ade <UART_Transmit_IT+0x48>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d110      	bne.n	8004ade <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ad0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	1c9a      	adds	r2, r3, #2
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	621a      	str	r2, [r3, #32]
 8004adc:	e008      	b.n	8004af0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	1c59      	adds	r1, r3, #1
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6211      	str	r1, [r2, #32]
 8004ae8:	781a      	ldrb	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	4619      	mov	r1, r3
 8004afe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10f      	bne.n	8004b24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	e000      	b.n	8004b2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b28:	2302      	movs	r3, #2
  }
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7fc fea2 	bl	80018a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b08c      	sub	sp, #48	; 0x30
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b22      	cmp	r3, #34	; 0x22
 8004b78:	f040 80ab 	bne.w	8004cd2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b84:	d117      	bne.n	8004bb6 <UART_Receive_IT+0x50>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d113      	bne.n	8004bb6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bae:	1c9a      	adds	r2, r3, #2
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	629a      	str	r2, [r3, #40]	; 0x28
 8004bb4:	e026      	b.n	8004c04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc8:	d007      	beq.n	8004bda <UART_Receive_IT+0x74>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10a      	bne.n	8004be8 <UART_Receive_IT+0x82>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be4:	701a      	strb	r2, [r3, #0]
 8004be6:	e008      	b.n	8004bfa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	4619      	mov	r1, r3
 8004c12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d15a      	bne.n	8004cce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0220 	bic.w	r2, r2, #32
 8004c26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695a      	ldr	r2, [r3, #20]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0201 	bic.w	r2, r2, #1
 8004c46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d135      	bne.n	8004cc4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	330c      	adds	r3, #12
 8004c64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f023 0310 	bic.w	r3, r3, #16
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	330c      	adds	r3, #12
 8004c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7e:	623a      	str	r2, [r7, #32]
 8004c80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	69f9      	ldr	r1, [r7, #28]
 8004c84:	6a3a      	ldr	r2, [r7, #32]
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e5      	bne.n	8004c5e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	2b10      	cmp	r3, #16
 8004c9e:	d10a      	bne.n	8004cb6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cba:	4619      	mov	r1, r3
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff fc4d 	bl	800455c <HAL_UARTEx_RxEventCallback>
 8004cc2:	e002      	b.n	8004cca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7fc fdfd 	bl	80018c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	e002      	b.n	8004cd4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	e000      	b.n	8004cd4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004cd2:	2302      	movs	r3, #2
  }
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3730      	adds	r7, #48	; 0x30
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ce0:	b0c0      	sub	sp, #256	; 0x100
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf8:	68d9      	ldr	r1, [r3, #12]
 8004cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	ea40 0301 	orr.w	r3, r0, r1
 8004d04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	431a      	orrs	r2, r3
 8004d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d34:	f021 010c 	bic.w	r1, r1, #12
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d42:	430b      	orrs	r3, r1
 8004d44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d56:	6999      	ldr	r1, [r3, #24]
 8004d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	ea40 0301 	orr.w	r3, r0, r1
 8004d62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	4b8f      	ldr	r3, [pc, #572]	; (8004fa8 <UART_SetConfig+0x2cc>)
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d005      	beq.n	8004d7c <UART_SetConfig+0xa0>
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	4b8d      	ldr	r3, [pc, #564]	; (8004fac <UART_SetConfig+0x2d0>)
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d104      	bne.n	8004d86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d7c:	f7ff f832 	bl	8003de4 <HAL_RCC_GetPCLK2Freq>
 8004d80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d84:	e003      	b.n	8004d8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d86:	f7ff f819 	bl	8003dbc <HAL_RCC_GetPCLK1Freq>
 8004d8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d98:	f040 810c 	bne.w	8004fb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004da0:	2200      	movs	r2, #0
 8004da2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004da6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004daa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004dae:	4622      	mov	r2, r4
 8004db0:	462b      	mov	r3, r5
 8004db2:	1891      	adds	r1, r2, r2
 8004db4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004db6:	415b      	adcs	r3, r3
 8004db8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	eb12 0801 	adds.w	r8, r2, r1
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	eb43 0901 	adc.w	r9, r3, r1
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dde:	4690      	mov	r8, r2
 8004de0:	4699      	mov	r9, r3
 8004de2:	4623      	mov	r3, r4
 8004de4:	eb18 0303 	adds.w	r3, r8, r3
 8004de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dec:	462b      	mov	r3, r5
 8004dee:	eb49 0303 	adc.w	r3, r9, r3
 8004df2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	18db      	adds	r3, r3, r3
 8004e0e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e10:	4613      	mov	r3, r2
 8004e12:	eb42 0303 	adc.w	r3, r2, r3
 8004e16:	657b      	str	r3, [r7, #84]	; 0x54
 8004e18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e20:	f7fb f9da 	bl	80001d8 <__aeabi_uldivmod>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4b61      	ldr	r3, [pc, #388]	; (8004fb0 <UART_SetConfig+0x2d4>)
 8004e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	011c      	lsls	r4, r3, #4
 8004e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e44:	4642      	mov	r2, r8
 8004e46:	464b      	mov	r3, r9
 8004e48:	1891      	adds	r1, r2, r2
 8004e4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e4c:	415b      	adcs	r3, r3
 8004e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e54:	4641      	mov	r1, r8
 8004e56:	eb12 0a01 	adds.w	sl, r2, r1
 8004e5a:	4649      	mov	r1, r9
 8004e5c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e74:	4692      	mov	sl, r2
 8004e76:	469b      	mov	fp, r3
 8004e78:	4643      	mov	r3, r8
 8004e7a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e82:	464b      	mov	r3, r9
 8004e84:	eb4b 0303 	adc.w	r3, fp, r3
 8004e88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	18db      	adds	r3, r3, r3
 8004ea4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	eb42 0303 	adc.w	r3, r2, r3
 8004eac:	647b      	str	r3, [r7, #68]	; 0x44
 8004eae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004eb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004eb6:	f7fb f98f 	bl	80001d8 <__aeabi_uldivmod>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	4b3b      	ldr	r3, [pc, #236]	; (8004fb0 <UART_SetConfig+0x2d4>)
 8004ec2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	2264      	movs	r2, #100	; 0x64
 8004eca:	fb02 f303 	mul.w	r3, r2, r3
 8004ece:	1acb      	subs	r3, r1, r3
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ed6:	4b36      	ldr	r3, [pc, #216]	; (8004fb0 <UART_SetConfig+0x2d4>)
 8004ed8:	fba3 2302 	umull	r2, r3, r3, r2
 8004edc:	095b      	lsrs	r3, r3, #5
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ee4:	441c      	add	r4, r3
 8004ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eea:	2200      	movs	r2, #0
 8004eec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ef0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ef4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ef8:	4642      	mov	r2, r8
 8004efa:	464b      	mov	r3, r9
 8004efc:	1891      	adds	r1, r2, r2
 8004efe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f00:	415b      	adcs	r3, r3
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f08:	4641      	mov	r1, r8
 8004f0a:	1851      	adds	r1, r2, r1
 8004f0c:	6339      	str	r1, [r7, #48]	; 0x30
 8004f0e:	4649      	mov	r1, r9
 8004f10:	414b      	adcs	r3, r1
 8004f12:	637b      	str	r3, [r7, #52]	; 0x34
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f20:	4659      	mov	r1, fp
 8004f22:	00cb      	lsls	r3, r1, #3
 8004f24:	4651      	mov	r1, sl
 8004f26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f2a:	4651      	mov	r1, sl
 8004f2c:	00ca      	lsls	r2, r1, #3
 8004f2e:	4610      	mov	r0, r2
 8004f30:	4619      	mov	r1, r3
 8004f32:	4603      	mov	r3, r0
 8004f34:	4642      	mov	r2, r8
 8004f36:	189b      	adds	r3, r3, r2
 8004f38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f3c:	464b      	mov	r3, r9
 8004f3e:	460a      	mov	r2, r1
 8004f40:	eb42 0303 	adc.w	r3, r2, r3
 8004f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	18db      	adds	r3, r3, r3
 8004f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f62:	4613      	mov	r3, r2
 8004f64:	eb42 0303 	adc.w	r3, r2, r3
 8004f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f72:	f7fb f931 	bl	80001d8 <__aeabi_uldivmod>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <UART_SetConfig+0x2d4>)
 8004f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f80:	095b      	lsrs	r3, r3, #5
 8004f82:	2164      	movs	r1, #100	; 0x64
 8004f84:	fb01 f303 	mul.w	r3, r1, r3
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	3332      	adds	r3, #50	; 0x32
 8004f8e:	4a08      	ldr	r2, [pc, #32]	; (8004fb0 <UART_SetConfig+0x2d4>)
 8004f90:	fba2 2303 	umull	r2, r3, r2, r3
 8004f94:	095b      	lsrs	r3, r3, #5
 8004f96:	f003 0207 	and.w	r2, r3, #7
 8004f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4422      	add	r2, r4
 8004fa2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fa4:	e105      	b.n	80051b2 <UART_SetConfig+0x4d6>
 8004fa6:	bf00      	nop
 8004fa8:	40011000 	.word	0x40011000
 8004fac:	40011400 	.word	0x40011400
 8004fb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004fc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fc6:	4642      	mov	r2, r8
 8004fc8:	464b      	mov	r3, r9
 8004fca:	1891      	adds	r1, r2, r2
 8004fcc:	6239      	str	r1, [r7, #32]
 8004fce:	415b      	adcs	r3, r3
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fd6:	4641      	mov	r1, r8
 8004fd8:	1854      	adds	r4, r2, r1
 8004fda:	4649      	mov	r1, r9
 8004fdc:	eb43 0501 	adc.w	r5, r3, r1
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	00eb      	lsls	r3, r5, #3
 8004fea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fee:	00e2      	lsls	r2, r4, #3
 8004ff0:	4614      	mov	r4, r2
 8004ff2:	461d      	mov	r5, r3
 8004ff4:	4643      	mov	r3, r8
 8004ff6:	18e3      	adds	r3, r4, r3
 8004ff8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ffc:	464b      	mov	r3, r9
 8004ffe:	eb45 0303 	adc.w	r3, r5, r3
 8005002:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005012:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005022:	4629      	mov	r1, r5
 8005024:	008b      	lsls	r3, r1, #2
 8005026:	4621      	mov	r1, r4
 8005028:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800502c:	4621      	mov	r1, r4
 800502e:	008a      	lsls	r2, r1, #2
 8005030:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005034:	f7fb f8d0 	bl	80001d8 <__aeabi_uldivmod>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4b60      	ldr	r3, [pc, #384]	; (80051c0 <UART_SetConfig+0x4e4>)
 800503e:	fba3 2302 	umull	r2, r3, r3, r2
 8005042:	095b      	lsrs	r3, r3, #5
 8005044:	011c      	lsls	r4, r3, #4
 8005046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800504a:	2200      	movs	r2, #0
 800504c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005050:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005054:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005058:	4642      	mov	r2, r8
 800505a:	464b      	mov	r3, r9
 800505c:	1891      	adds	r1, r2, r2
 800505e:	61b9      	str	r1, [r7, #24]
 8005060:	415b      	adcs	r3, r3
 8005062:	61fb      	str	r3, [r7, #28]
 8005064:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005068:	4641      	mov	r1, r8
 800506a:	1851      	adds	r1, r2, r1
 800506c:	6139      	str	r1, [r7, #16]
 800506e:	4649      	mov	r1, r9
 8005070:	414b      	adcs	r3, r1
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005080:	4659      	mov	r1, fp
 8005082:	00cb      	lsls	r3, r1, #3
 8005084:	4651      	mov	r1, sl
 8005086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800508a:	4651      	mov	r1, sl
 800508c:	00ca      	lsls	r2, r1, #3
 800508e:	4610      	mov	r0, r2
 8005090:	4619      	mov	r1, r3
 8005092:	4603      	mov	r3, r0
 8005094:	4642      	mov	r2, r8
 8005096:	189b      	adds	r3, r3, r2
 8005098:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800509c:	464b      	mov	r3, r9
 800509e:	460a      	mov	r2, r1
 80050a0:	eb42 0303 	adc.w	r3, r2, r3
 80050a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80050b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	f04f 0300 	mov.w	r3, #0
 80050bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050c0:	4649      	mov	r1, r9
 80050c2:	008b      	lsls	r3, r1, #2
 80050c4:	4641      	mov	r1, r8
 80050c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ca:	4641      	mov	r1, r8
 80050cc:	008a      	lsls	r2, r1, #2
 80050ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050d2:	f7fb f881 	bl	80001d8 <__aeabi_uldivmod>
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	4b39      	ldr	r3, [pc, #228]	; (80051c0 <UART_SetConfig+0x4e4>)
 80050dc:	fba3 1302 	umull	r1, r3, r3, r2
 80050e0:	095b      	lsrs	r3, r3, #5
 80050e2:	2164      	movs	r1, #100	; 0x64
 80050e4:	fb01 f303 	mul.w	r3, r1, r3
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	3332      	adds	r3, #50	; 0x32
 80050ee:	4a34      	ldr	r2, [pc, #208]	; (80051c0 <UART_SetConfig+0x4e4>)
 80050f0:	fba2 2303 	umull	r2, r3, r2, r3
 80050f4:	095b      	lsrs	r3, r3, #5
 80050f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050fa:	441c      	add	r4, r3
 80050fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005100:	2200      	movs	r2, #0
 8005102:	673b      	str	r3, [r7, #112]	; 0x70
 8005104:	677a      	str	r2, [r7, #116]	; 0x74
 8005106:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800510a:	4642      	mov	r2, r8
 800510c:	464b      	mov	r3, r9
 800510e:	1891      	adds	r1, r2, r2
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	415b      	adcs	r3, r3
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800511a:	4641      	mov	r1, r8
 800511c:	1851      	adds	r1, r2, r1
 800511e:	6039      	str	r1, [r7, #0]
 8005120:	4649      	mov	r1, r9
 8005122:	414b      	adcs	r3, r1
 8005124:	607b      	str	r3, [r7, #4]
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005132:	4659      	mov	r1, fp
 8005134:	00cb      	lsls	r3, r1, #3
 8005136:	4651      	mov	r1, sl
 8005138:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800513c:	4651      	mov	r1, sl
 800513e:	00ca      	lsls	r2, r1, #3
 8005140:	4610      	mov	r0, r2
 8005142:	4619      	mov	r1, r3
 8005144:	4603      	mov	r3, r0
 8005146:	4642      	mov	r2, r8
 8005148:	189b      	adds	r3, r3, r2
 800514a:	66bb      	str	r3, [r7, #104]	; 0x68
 800514c:	464b      	mov	r3, r9
 800514e:	460a      	mov	r2, r1
 8005150:	eb42 0303 	adc.w	r3, r2, r3
 8005154:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	663b      	str	r3, [r7, #96]	; 0x60
 8005160:	667a      	str	r2, [r7, #100]	; 0x64
 8005162:	f04f 0200 	mov.w	r2, #0
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800516e:	4649      	mov	r1, r9
 8005170:	008b      	lsls	r3, r1, #2
 8005172:	4641      	mov	r1, r8
 8005174:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005178:	4641      	mov	r1, r8
 800517a:	008a      	lsls	r2, r1, #2
 800517c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005180:	f7fb f82a 	bl	80001d8 <__aeabi_uldivmod>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4b0d      	ldr	r3, [pc, #52]	; (80051c0 <UART_SetConfig+0x4e4>)
 800518a:	fba3 1302 	umull	r1, r3, r3, r2
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	2164      	movs	r1, #100	; 0x64
 8005192:	fb01 f303 	mul.w	r3, r1, r3
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	3332      	adds	r3, #50	; 0x32
 800519c:	4a08      	ldr	r2, [pc, #32]	; (80051c0 <UART_SetConfig+0x4e4>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	095b      	lsrs	r3, r3, #5
 80051a4:	f003 020f 	and.w	r2, r3, #15
 80051a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4422      	add	r2, r4
 80051b0:	609a      	str	r2, [r3, #8]
}
 80051b2:	bf00      	nop
 80051b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051b8:	46bd      	mov	sp, r7
 80051ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051be:	bf00      	nop
 80051c0:	51eb851f 	.word	0x51eb851f

080051c4 <__cxa_pure_virtual>:
 80051c4:	b508      	push	{r3, lr}
 80051c6:	f000 f80d 	bl	80051e4 <_ZSt9terminatev>

080051ca <_ZN10__cxxabiv111__terminateEPFvvE>:
 80051ca:	b508      	push	{r3, lr}
 80051cc:	4780      	blx	r0
 80051ce:	f000 f80e 	bl	80051ee <abort>
	...

080051d4 <_ZSt13get_terminatev>:
 80051d4:	4b02      	ldr	r3, [pc, #8]	; (80051e0 <_ZSt13get_terminatev+0xc>)
 80051d6:	6818      	ldr	r0, [r3, #0]
 80051d8:	f3bf 8f5b 	dmb	ish
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	20000024 	.word	0x20000024

080051e4 <_ZSt9terminatev>:
 80051e4:	b508      	push	{r3, lr}
 80051e6:	f7ff fff5 	bl	80051d4 <_ZSt13get_terminatev>
 80051ea:	f7ff ffee 	bl	80051ca <_ZN10__cxxabiv111__terminateEPFvvE>

080051ee <abort>:
 80051ee:	b508      	push	{r3, lr}
 80051f0:	2006      	movs	r0, #6
 80051f2:	f000 f873 	bl	80052dc <raise>
 80051f6:	2001      	movs	r0, #1
 80051f8:	f7fd f9ee 	bl	80025d8 <_exit>

080051fc <__errno>:
 80051fc:	4b01      	ldr	r3, [pc, #4]	; (8005204 <__errno+0x8>)
 80051fe:	6818      	ldr	r0, [r3, #0]
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	20000028 	.word	0x20000028

08005208 <__libc_init_array>:
 8005208:	b570      	push	{r4, r5, r6, lr}
 800520a:	4d0d      	ldr	r5, [pc, #52]	; (8005240 <__libc_init_array+0x38>)
 800520c:	4c0d      	ldr	r4, [pc, #52]	; (8005244 <__libc_init_array+0x3c>)
 800520e:	1b64      	subs	r4, r4, r5
 8005210:	10a4      	asrs	r4, r4, #2
 8005212:	2600      	movs	r6, #0
 8005214:	42a6      	cmp	r6, r4
 8005216:	d109      	bne.n	800522c <__libc_init_array+0x24>
 8005218:	4d0b      	ldr	r5, [pc, #44]	; (8005248 <__libc_init_array+0x40>)
 800521a:	4c0c      	ldr	r4, [pc, #48]	; (800524c <__libc_init_array+0x44>)
 800521c:	f000 f9b0 	bl	8005580 <_init>
 8005220:	1b64      	subs	r4, r4, r5
 8005222:	10a4      	asrs	r4, r4, #2
 8005224:	2600      	movs	r6, #0
 8005226:	42a6      	cmp	r6, r4
 8005228:	d105      	bne.n	8005236 <__libc_init_array+0x2e>
 800522a:	bd70      	pop	{r4, r5, r6, pc}
 800522c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005230:	4798      	blx	r3
 8005232:	3601      	adds	r6, #1
 8005234:	e7ee      	b.n	8005214 <__libc_init_array+0xc>
 8005236:	f855 3b04 	ldr.w	r3, [r5], #4
 800523a:	4798      	blx	r3
 800523c:	3601      	adds	r6, #1
 800523e:	e7f2      	b.n	8005226 <__libc_init_array+0x1e>
 8005240:	080057e0 	.word	0x080057e0
 8005244:	080057e0 	.word	0x080057e0
 8005248:	080057e0 	.word	0x080057e0
 800524c:	080057e8 	.word	0x080057e8

08005250 <memcpy>:
 8005250:	440a      	add	r2, r1
 8005252:	4291      	cmp	r1, r2
 8005254:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005258:	d100      	bne.n	800525c <memcpy+0xc>
 800525a:	4770      	bx	lr
 800525c:	b510      	push	{r4, lr}
 800525e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005262:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005266:	4291      	cmp	r1, r2
 8005268:	d1f9      	bne.n	800525e <memcpy+0xe>
 800526a:	bd10      	pop	{r4, pc}

0800526c <memset>:
 800526c:	4402      	add	r2, r0
 800526e:	4603      	mov	r3, r0
 8005270:	4293      	cmp	r3, r2
 8005272:	d100      	bne.n	8005276 <memset+0xa>
 8005274:	4770      	bx	lr
 8005276:	f803 1b01 	strb.w	r1, [r3], #1
 800527a:	e7f9      	b.n	8005270 <memset+0x4>

0800527c <realloc>:
 800527c:	4b02      	ldr	r3, [pc, #8]	; (8005288 <realloc+0xc>)
 800527e:	460a      	mov	r2, r1
 8005280:	4601      	mov	r1, r0
 8005282:	6818      	ldr	r0, [r3, #0]
 8005284:	f000 b8da 	b.w	800543c <_realloc_r>
 8005288:	20000028 	.word	0x20000028

0800528c <_raise_r>:
 800528c:	291f      	cmp	r1, #31
 800528e:	b538      	push	{r3, r4, r5, lr}
 8005290:	4604      	mov	r4, r0
 8005292:	460d      	mov	r5, r1
 8005294:	d904      	bls.n	80052a0 <_raise_r+0x14>
 8005296:	2316      	movs	r3, #22
 8005298:	6003      	str	r3, [r0, #0]
 800529a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800529e:	bd38      	pop	{r3, r4, r5, pc}
 80052a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80052a2:	b112      	cbz	r2, 80052aa <_raise_r+0x1e>
 80052a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80052a8:	b94b      	cbnz	r3, 80052be <_raise_r+0x32>
 80052aa:	4620      	mov	r0, r4
 80052ac:	f000 f830 	bl	8005310 <_getpid_r>
 80052b0:	462a      	mov	r2, r5
 80052b2:	4601      	mov	r1, r0
 80052b4:	4620      	mov	r0, r4
 80052b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052ba:	f000 b817 	b.w	80052ec <_kill_r>
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d00a      	beq.n	80052d8 <_raise_r+0x4c>
 80052c2:	1c59      	adds	r1, r3, #1
 80052c4:	d103      	bne.n	80052ce <_raise_r+0x42>
 80052c6:	2316      	movs	r3, #22
 80052c8:	6003      	str	r3, [r0, #0]
 80052ca:	2001      	movs	r0, #1
 80052cc:	e7e7      	b.n	800529e <_raise_r+0x12>
 80052ce:	2400      	movs	r4, #0
 80052d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80052d4:	4628      	mov	r0, r5
 80052d6:	4798      	blx	r3
 80052d8:	2000      	movs	r0, #0
 80052da:	e7e0      	b.n	800529e <_raise_r+0x12>

080052dc <raise>:
 80052dc:	4b02      	ldr	r3, [pc, #8]	; (80052e8 <raise+0xc>)
 80052de:	4601      	mov	r1, r0
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	f7ff bfd3 	b.w	800528c <_raise_r>
 80052e6:	bf00      	nop
 80052e8:	20000028 	.word	0x20000028

080052ec <_kill_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	4d07      	ldr	r5, [pc, #28]	; (800530c <_kill_r+0x20>)
 80052f0:	2300      	movs	r3, #0
 80052f2:	4604      	mov	r4, r0
 80052f4:	4608      	mov	r0, r1
 80052f6:	4611      	mov	r1, r2
 80052f8:	602b      	str	r3, [r5, #0]
 80052fa:	f7fd f95d 	bl	80025b8 <_kill>
 80052fe:	1c43      	adds	r3, r0, #1
 8005300:	d102      	bne.n	8005308 <_kill_r+0x1c>
 8005302:	682b      	ldr	r3, [r5, #0]
 8005304:	b103      	cbz	r3, 8005308 <_kill_r+0x1c>
 8005306:	6023      	str	r3, [r4, #0]
 8005308:	bd38      	pop	{r3, r4, r5, pc}
 800530a:	bf00      	nop
 800530c:	20000b18 	.word	0x20000b18

08005310 <_getpid_r>:
 8005310:	f7fd b94a 	b.w	80025a8 <_getpid>

08005314 <sbrk_aligned>:
 8005314:	b570      	push	{r4, r5, r6, lr}
 8005316:	4e0e      	ldr	r6, [pc, #56]	; (8005350 <sbrk_aligned+0x3c>)
 8005318:	460c      	mov	r4, r1
 800531a:	6831      	ldr	r1, [r6, #0]
 800531c:	4605      	mov	r5, r0
 800531e:	b911      	cbnz	r1, 8005326 <sbrk_aligned+0x12>
 8005320:	f000 f8bc 	bl	800549c <_sbrk_r>
 8005324:	6030      	str	r0, [r6, #0]
 8005326:	4621      	mov	r1, r4
 8005328:	4628      	mov	r0, r5
 800532a:	f000 f8b7 	bl	800549c <_sbrk_r>
 800532e:	1c43      	adds	r3, r0, #1
 8005330:	d00a      	beq.n	8005348 <sbrk_aligned+0x34>
 8005332:	1cc4      	adds	r4, r0, #3
 8005334:	f024 0403 	bic.w	r4, r4, #3
 8005338:	42a0      	cmp	r0, r4
 800533a:	d007      	beq.n	800534c <sbrk_aligned+0x38>
 800533c:	1a21      	subs	r1, r4, r0
 800533e:	4628      	mov	r0, r5
 8005340:	f000 f8ac 	bl	800549c <_sbrk_r>
 8005344:	3001      	adds	r0, #1
 8005346:	d101      	bne.n	800534c <sbrk_aligned+0x38>
 8005348:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800534c:	4620      	mov	r0, r4
 800534e:	bd70      	pop	{r4, r5, r6, pc}
 8005350:	20000b14 	.word	0x20000b14

08005354 <_malloc_r>:
 8005354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005358:	1ccd      	adds	r5, r1, #3
 800535a:	f025 0503 	bic.w	r5, r5, #3
 800535e:	3508      	adds	r5, #8
 8005360:	2d0c      	cmp	r5, #12
 8005362:	bf38      	it	cc
 8005364:	250c      	movcc	r5, #12
 8005366:	2d00      	cmp	r5, #0
 8005368:	4607      	mov	r7, r0
 800536a:	db01      	blt.n	8005370 <_malloc_r+0x1c>
 800536c:	42a9      	cmp	r1, r5
 800536e:	d905      	bls.n	800537c <_malloc_r+0x28>
 8005370:	230c      	movs	r3, #12
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	2600      	movs	r6, #0
 8005376:	4630      	mov	r0, r6
 8005378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800537c:	4e2e      	ldr	r6, [pc, #184]	; (8005438 <_malloc_r+0xe4>)
 800537e:	f000 f89d 	bl	80054bc <__malloc_lock>
 8005382:	6833      	ldr	r3, [r6, #0]
 8005384:	461c      	mov	r4, r3
 8005386:	bb34      	cbnz	r4, 80053d6 <_malloc_r+0x82>
 8005388:	4629      	mov	r1, r5
 800538a:	4638      	mov	r0, r7
 800538c:	f7ff ffc2 	bl	8005314 <sbrk_aligned>
 8005390:	1c43      	adds	r3, r0, #1
 8005392:	4604      	mov	r4, r0
 8005394:	d14d      	bne.n	8005432 <_malloc_r+0xde>
 8005396:	6834      	ldr	r4, [r6, #0]
 8005398:	4626      	mov	r6, r4
 800539a:	2e00      	cmp	r6, #0
 800539c:	d140      	bne.n	8005420 <_malloc_r+0xcc>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	4631      	mov	r1, r6
 80053a2:	4638      	mov	r0, r7
 80053a4:	eb04 0803 	add.w	r8, r4, r3
 80053a8:	f000 f878 	bl	800549c <_sbrk_r>
 80053ac:	4580      	cmp	r8, r0
 80053ae:	d13a      	bne.n	8005426 <_malloc_r+0xd2>
 80053b0:	6821      	ldr	r1, [r4, #0]
 80053b2:	3503      	adds	r5, #3
 80053b4:	1a6d      	subs	r5, r5, r1
 80053b6:	f025 0503 	bic.w	r5, r5, #3
 80053ba:	3508      	adds	r5, #8
 80053bc:	2d0c      	cmp	r5, #12
 80053be:	bf38      	it	cc
 80053c0:	250c      	movcc	r5, #12
 80053c2:	4629      	mov	r1, r5
 80053c4:	4638      	mov	r0, r7
 80053c6:	f7ff ffa5 	bl	8005314 <sbrk_aligned>
 80053ca:	3001      	adds	r0, #1
 80053cc:	d02b      	beq.n	8005426 <_malloc_r+0xd2>
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	442b      	add	r3, r5
 80053d2:	6023      	str	r3, [r4, #0]
 80053d4:	e00e      	b.n	80053f4 <_malloc_r+0xa0>
 80053d6:	6822      	ldr	r2, [r4, #0]
 80053d8:	1b52      	subs	r2, r2, r5
 80053da:	d41e      	bmi.n	800541a <_malloc_r+0xc6>
 80053dc:	2a0b      	cmp	r2, #11
 80053de:	d916      	bls.n	800540e <_malloc_r+0xba>
 80053e0:	1961      	adds	r1, r4, r5
 80053e2:	42a3      	cmp	r3, r4
 80053e4:	6025      	str	r5, [r4, #0]
 80053e6:	bf18      	it	ne
 80053e8:	6059      	strne	r1, [r3, #4]
 80053ea:	6863      	ldr	r3, [r4, #4]
 80053ec:	bf08      	it	eq
 80053ee:	6031      	streq	r1, [r6, #0]
 80053f0:	5162      	str	r2, [r4, r5]
 80053f2:	604b      	str	r3, [r1, #4]
 80053f4:	4638      	mov	r0, r7
 80053f6:	f104 060b 	add.w	r6, r4, #11
 80053fa:	f000 f865 	bl	80054c8 <__malloc_unlock>
 80053fe:	f026 0607 	bic.w	r6, r6, #7
 8005402:	1d23      	adds	r3, r4, #4
 8005404:	1af2      	subs	r2, r6, r3
 8005406:	d0b6      	beq.n	8005376 <_malloc_r+0x22>
 8005408:	1b9b      	subs	r3, r3, r6
 800540a:	50a3      	str	r3, [r4, r2]
 800540c:	e7b3      	b.n	8005376 <_malloc_r+0x22>
 800540e:	6862      	ldr	r2, [r4, #4]
 8005410:	42a3      	cmp	r3, r4
 8005412:	bf0c      	ite	eq
 8005414:	6032      	streq	r2, [r6, #0]
 8005416:	605a      	strne	r2, [r3, #4]
 8005418:	e7ec      	b.n	80053f4 <_malloc_r+0xa0>
 800541a:	4623      	mov	r3, r4
 800541c:	6864      	ldr	r4, [r4, #4]
 800541e:	e7b2      	b.n	8005386 <_malloc_r+0x32>
 8005420:	4634      	mov	r4, r6
 8005422:	6876      	ldr	r6, [r6, #4]
 8005424:	e7b9      	b.n	800539a <_malloc_r+0x46>
 8005426:	230c      	movs	r3, #12
 8005428:	603b      	str	r3, [r7, #0]
 800542a:	4638      	mov	r0, r7
 800542c:	f000 f84c 	bl	80054c8 <__malloc_unlock>
 8005430:	e7a1      	b.n	8005376 <_malloc_r+0x22>
 8005432:	6025      	str	r5, [r4, #0]
 8005434:	e7de      	b.n	80053f4 <_malloc_r+0xa0>
 8005436:	bf00      	nop
 8005438:	20000b10 	.word	0x20000b10

0800543c <_realloc_r>:
 800543c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005440:	4680      	mov	r8, r0
 8005442:	4614      	mov	r4, r2
 8005444:	460e      	mov	r6, r1
 8005446:	b921      	cbnz	r1, 8005452 <_realloc_r+0x16>
 8005448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800544c:	4611      	mov	r1, r2
 800544e:	f7ff bf81 	b.w	8005354 <_malloc_r>
 8005452:	b92a      	cbnz	r2, 8005460 <_realloc_r+0x24>
 8005454:	f000 f83e 	bl	80054d4 <_free_r>
 8005458:	4625      	mov	r5, r4
 800545a:	4628      	mov	r0, r5
 800545c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005460:	f000 f884 	bl	800556c <_malloc_usable_size_r>
 8005464:	4284      	cmp	r4, r0
 8005466:	4607      	mov	r7, r0
 8005468:	d802      	bhi.n	8005470 <_realloc_r+0x34>
 800546a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800546e:	d812      	bhi.n	8005496 <_realloc_r+0x5a>
 8005470:	4621      	mov	r1, r4
 8005472:	4640      	mov	r0, r8
 8005474:	f7ff ff6e 	bl	8005354 <_malloc_r>
 8005478:	4605      	mov	r5, r0
 800547a:	2800      	cmp	r0, #0
 800547c:	d0ed      	beq.n	800545a <_realloc_r+0x1e>
 800547e:	42bc      	cmp	r4, r7
 8005480:	4622      	mov	r2, r4
 8005482:	4631      	mov	r1, r6
 8005484:	bf28      	it	cs
 8005486:	463a      	movcs	r2, r7
 8005488:	f7ff fee2 	bl	8005250 <memcpy>
 800548c:	4631      	mov	r1, r6
 800548e:	4640      	mov	r0, r8
 8005490:	f000 f820 	bl	80054d4 <_free_r>
 8005494:	e7e1      	b.n	800545a <_realloc_r+0x1e>
 8005496:	4635      	mov	r5, r6
 8005498:	e7df      	b.n	800545a <_realloc_r+0x1e>
	...

0800549c <_sbrk_r>:
 800549c:	b538      	push	{r3, r4, r5, lr}
 800549e:	4d06      	ldr	r5, [pc, #24]	; (80054b8 <_sbrk_r+0x1c>)
 80054a0:	2300      	movs	r3, #0
 80054a2:	4604      	mov	r4, r0
 80054a4:	4608      	mov	r0, r1
 80054a6:	602b      	str	r3, [r5, #0]
 80054a8:	f7fd f8a0 	bl	80025ec <_sbrk>
 80054ac:	1c43      	adds	r3, r0, #1
 80054ae:	d102      	bne.n	80054b6 <_sbrk_r+0x1a>
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	b103      	cbz	r3, 80054b6 <_sbrk_r+0x1a>
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	bd38      	pop	{r3, r4, r5, pc}
 80054b8:	20000b18 	.word	0x20000b18

080054bc <__malloc_lock>:
 80054bc:	4801      	ldr	r0, [pc, #4]	; (80054c4 <__malloc_lock+0x8>)
 80054be:	f000 b85d 	b.w	800557c <__retarget_lock_acquire_recursive>
 80054c2:	bf00      	nop
 80054c4:	20000b1c 	.word	0x20000b1c

080054c8 <__malloc_unlock>:
 80054c8:	4801      	ldr	r0, [pc, #4]	; (80054d0 <__malloc_unlock+0x8>)
 80054ca:	f000 b858 	b.w	800557e <__retarget_lock_release_recursive>
 80054ce:	bf00      	nop
 80054d0:	20000b1c 	.word	0x20000b1c

080054d4 <_free_r>:
 80054d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054d6:	2900      	cmp	r1, #0
 80054d8:	d044      	beq.n	8005564 <_free_r+0x90>
 80054da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054de:	9001      	str	r0, [sp, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f1a1 0404 	sub.w	r4, r1, #4
 80054e6:	bfb8      	it	lt
 80054e8:	18e4      	addlt	r4, r4, r3
 80054ea:	f7ff ffe7 	bl	80054bc <__malloc_lock>
 80054ee:	4a1e      	ldr	r2, [pc, #120]	; (8005568 <_free_r+0x94>)
 80054f0:	9801      	ldr	r0, [sp, #4]
 80054f2:	6813      	ldr	r3, [r2, #0]
 80054f4:	b933      	cbnz	r3, 8005504 <_free_r+0x30>
 80054f6:	6063      	str	r3, [r4, #4]
 80054f8:	6014      	str	r4, [r2, #0]
 80054fa:	b003      	add	sp, #12
 80054fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005500:	f7ff bfe2 	b.w	80054c8 <__malloc_unlock>
 8005504:	42a3      	cmp	r3, r4
 8005506:	d908      	bls.n	800551a <_free_r+0x46>
 8005508:	6825      	ldr	r5, [r4, #0]
 800550a:	1961      	adds	r1, r4, r5
 800550c:	428b      	cmp	r3, r1
 800550e:	bf01      	itttt	eq
 8005510:	6819      	ldreq	r1, [r3, #0]
 8005512:	685b      	ldreq	r3, [r3, #4]
 8005514:	1949      	addeq	r1, r1, r5
 8005516:	6021      	streq	r1, [r4, #0]
 8005518:	e7ed      	b.n	80054f6 <_free_r+0x22>
 800551a:	461a      	mov	r2, r3
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	b10b      	cbz	r3, 8005524 <_free_r+0x50>
 8005520:	42a3      	cmp	r3, r4
 8005522:	d9fa      	bls.n	800551a <_free_r+0x46>
 8005524:	6811      	ldr	r1, [r2, #0]
 8005526:	1855      	adds	r5, r2, r1
 8005528:	42a5      	cmp	r5, r4
 800552a:	d10b      	bne.n	8005544 <_free_r+0x70>
 800552c:	6824      	ldr	r4, [r4, #0]
 800552e:	4421      	add	r1, r4
 8005530:	1854      	adds	r4, r2, r1
 8005532:	42a3      	cmp	r3, r4
 8005534:	6011      	str	r1, [r2, #0]
 8005536:	d1e0      	bne.n	80054fa <_free_r+0x26>
 8005538:	681c      	ldr	r4, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	6053      	str	r3, [r2, #4]
 800553e:	4421      	add	r1, r4
 8005540:	6011      	str	r1, [r2, #0]
 8005542:	e7da      	b.n	80054fa <_free_r+0x26>
 8005544:	d902      	bls.n	800554c <_free_r+0x78>
 8005546:	230c      	movs	r3, #12
 8005548:	6003      	str	r3, [r0, #0]
 800554a:	e7d6      	b.n	80054fa <_free_r+0x26>
 800554c:	6825      	ldr	r5, [r4, #0]
 800554e:	1961      	adds	r1, r4, r5
 8005550:	428b      	cmp	r3, r1
 8005552:	bf04      	itt	eq
 8005554:	6819      	ldreq	r1, [r3, #0]
 8005556:	685b      	ldreq	r3, [r3, #4]
 8005558:	6063      	str	r3, [r4, #4]
 800555a:	bf04      	itt	eq
 800555c:	1949      	addeq	r1, r1, r5
 800555e:	6021      	streq	r1, [r4, #0]
 8005560:	6054      	str	r4, [r2, #4]
 8005562:	e7ca      	b.n	80054fa <_free_r+0x26>
 8005564:	b003      	add	sp, #12
 8005566:	bd30      	pop	{r4, r5, pc}
 8005568:	20000b10 	.word	0x20000b10

0800556c <_malloc_usable_size_r>:
 800556c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005570:	1f18      	subs	r0, r3, #4
 8005572:	2b00      	cmp	r3, #0
 8005574:	bfbc      	itt	lt
 8005576:	580b      	ldrlt	r3, [r1, r0]
 8005578:	18c0      	addlt	r0, r0, r3
 800557a:	4770      	bx	lr

0800557c <__retarget_lock_acquire_recursive>:
 800557c:	4770      	bx	lr

0800557e <__retarget_lock_release_recursive>:
 800557e:	4770      	bx	lr

08005580 <_init>:
 8005580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005582:	bf00      	nop
 8005584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005586:	bc08      	pop	{r3}
 8005588:	469e      	mov	lr, r3
 800558a:	4770      	bx	lr

0800558c <_fini>:
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	bf00      	nop
 8005590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005592:	bc08      	pop	{r3}
 8005594:	469e      	mov	lr, r3
 8005596:	4770      	bx	lr
